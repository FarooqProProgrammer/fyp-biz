{"version":3,"sources":["../src/app.ts","../src/routes/auth.route.ts","../src/lib/multer.ts","../src/models/user.model.ts","../src/controller/auth.controller.ts","../src/config/connection.ts","../src/routes/customer.route.ts","../src/models/customer.model.ts","../src/controller/customer.controller.ts","../src/routes/service.route.ts","../src/models/service.model.ts","../src/controller/service.controller.ts","../src/server.ts"],"sourcesContent":["import express, { Express } from \"express\";\r\nimport cors from \"cors\";\r\nimport dotenv from \"dotenv\";\r\nimport authRouter from \"./routes/auth.route\";\r\nimport connectDb from \"./config/connection\";\r\nimport path from \"path\";\r\nimport customerRouter from \"./routes/customer.route\";\r\nimport serviceRouter from \"./routes/service.route\";\r\n\r\n\r\n\r\nconst app: Express = express();\r\n\r\ndotenv.config();\r\nconnectDb()\r\n\r\n// Middlewares\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\napp.use(express.static(\"uploads/\"))\r\n\r\n// Route to serve files from the uploads folder\r\napp.get(\"/uploads/:file\", (req, res) => {\r\n    const fileName = req.params.file;\r\n    const filePath = path.join(__dirname, \"uploads\", fileName);\r\n\r\n    res.sendFile(filePath, (err) => {\r\n        if (err) {\r\n            res.status(404).json({ message: \"File not found\" });\r\n        }\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\n// All Routes\r\napp.use(authRouter)\r\napp.use(customerRouter)\r\napp.use(serviceRouter)\r\n\r\n\r\n\r\nexport default app;","import express, { Router } from \"express\"\r\nimport upload from \"../lib/multer\";\r\nimport { login, register } from \"../controller/auth.controller\";\r\nconst authRouter: Router  = express.Router();\r\n\r\n\r\n\r\n\r\nauthRouter.post(\"/register\",upload.single(\"image\"),register)\r\nauthRouter.post(\"/login\",login)\r\n\r\n\r\n\r\nexport default authRouter","import multer from \"multer\";\r\nimport path from \"path\";\r\n\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"uploads/\"); \r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n    cb(null, file.fieldname + \"-\" + uniqueSuffix + path.extname(file.originalname));\r\n  },\r\n});\r\n\r\n\r\nconst fileFilter = (req: Express.Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  if (file.mimetype.startsWith(\"image/\")) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(\"Only image files are allowed\"));\r\n  }\r\n};\r\n\r\n\r\nconst upload = multer({ storage, fileFilter });\r\n\r\nexport default upload;\r\n","import mongoose from \"mongoose\"\r\n\r\n\r\nconst UserSchema = new mongoose.Schema(\r\n    {\r\n        name : {\r\n            type: String,\r\n            required:true\r\n        },\r\n        email : {\r\n            type: String,\r\n            required:true,\r\n            unique:true\r\n        },\r\n        password : {\r\n            type: String,\r\n            required:true,\r\n        },\r\n        image: {\r\n            type:String,\r\n            required:true,\r\n        },\r\n\r\n    },\r\n    {\r\n        timestamps:true\r\n    }\r\n)\r\n\r\nconst UserModel = mongoose.model(\"user\",UserSchema)\r\nexport default UserModel","import { Request, Response } from \"express\";\r\nimport UserModel from \"../models/user.model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\"\r\nimport dotenv from \"dotenv\"\r\n\r\n\r\ndotenv.config();\r\n\r\n\r\ninterface MulterRequest extends Request {\r\n  file?: Express.Multer.File;\r\n}\r\n\r\nexport const register = async (req: MulterRequest, res: Response): Promise<void> => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    console.log(req.body)\r\n    const image = req.file ? req.file.path : \"\";\r\n\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\r\n    const existingUser = await UserModel.findOne({ email });\r\n    if (existingUser) {\r\n      res.status(400).json({ message: \"User already exists\" });\r\n      return;\r\n    }\r\n\r\n    const newUser = new UserModel({ name, email, password:hashedPassword, image });\r\n    await newUser.save();\r\n\r\n    res.status(201).json({ message: \"User created successfully\", user: newUser });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error creating user\", error });\r\n  }\r\n};\r\n\r\n\r\nexport const login = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    console.log(req.body)\r\n\r\n    // Check if user exists\r\n    const user = await UserModel.findOne({ email });\r\n    if (!user) {\r\n      res.status(400).json({ message: \"Invalid email or password\" });\r\n      return;\r\n    }\r\n\r\n    // Validate password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      res.status(400).json({ message: \"Invalid email or password\" });\r\n      return;\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET as string, {\r\n      expiresIn: \"1d\",\r\n    });\r\n\r\n      // Convert Mongoose document to plain object\r\n      const userObject = user.toObject() as any;\r\n      delete userObject.password; // Remove password field\r\n\r\n\r\n    res.status(200).json({ message: \"Login successful\", token, user: userObject });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error logging in\", error });\r\n  }\r\n};","import mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nconst connectDb = async () => {\r\n  try {\r\n    if (!process.env.DATABASE_URI) {\r\n      throw new Error(\"DATABASE_URI is not defined in environment variables.\");\r\n    }\r\n\r\n    await mongoose.connect(process.env.DATABASE_URI);\r\n\r\n    console.log(\"MongoDB connected successfully!\");\r\n  } catch (error) {\r\n    process.exit(1); // Exit process with failure\r\n  }\r\n};\r\n\r\nexport default connectDb;\r\n","import express, { Router } from \"express\"\r\nimport { createCustomer, deleteCustomer, getAllCustomer, getSingleCustomer, updateCustomer } from \"../controller/customer.controller\";\r\nconst customerRouter: Router  = express.Router();\r\n\r\n\r\n\r\n\r\ncustomerRouter.route(\"/customer\").post(createCustomer).get(getAllCustomer)\r\ncustomerRouter.route(\"/customer/:id\").delete(deleteCustomer).get(getSingleCustomer).put(updateCustomer)\r\n\r\n\r\nexport default customerRouter","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\n// Define Customer Interface\r\nexport interface ICustomer extends Document {\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    address?: string; // Optional field\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n}\r\n\r\n// Define Customer Schema\r\nconst CustomerSchema: Schema<ICustomer> = new mongoose.Schema(\r\n    {\r\n        name: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        email: {\r\n            type: String,\r\n            required: true,\r\n            unique: true\r\n        },\r\n        phone: {\r\n            type: String,\r\n            required: true,\r\n          \r\n        },\r\n        address: {\r\n            type: String,\r\n            required: false,\r\n        },\r\n    },\r\n    {\r\n        timestamps: true\r\n    }\r\n);\r\n\r\n// Create Customer Model with Type Support\r\nconst CustomerModel: Model<ICustomer> = mongoose.model<ICustomer>(\"customer\", CustomerSchema);\r\n\r\nexport default CustomerModel;\r\n","import { Request, Response } from \"express\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport CustomerModel from \"../models/customer.model\";\r\n\r\n\r\nexport const createCustomer = async (req: Request, res: Response): Promise<void> => {\r\n\r\n    try {\r\n        const { name, email, phone, address } = req.body;\r\n\r\n        console.log(req.body)\r\n\r\n        // Check if customer already exists\r\n        const existingCustomer = await CustomerModel.findOne({ email });\r\n        if (existingCustomer) {\r\n            res.status(400).json({ message: \"Customer with this email already exists.\" });\r\n            return;\r\n        }\r\n\r\n        // Hash the password\r\n\r\n        // Create new customer\r\n        const newCustomer = new CustomerModel({\r\n            name,\r\n            email,\r\n            phone,\r\n            address,\r\n\r\n        });\r\n\r\n        // Save customer to the database\r\n        await newCustomer.save();\r\n\r\n        res.status(201).json({\r\n            message: \"Customer created successfully\",\r\n            customer: {\r\n                id: newCustomer._id,\r\n                name: newCustomer.name,\r\n                email: newCustomer.email,\r\n                phone: newCustomer.phone,\r\n                address: newCustomer.address,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error creating customer:\", error);\r\n        res.status(500).json({ message: \"Internal Server Error\", error });\r\n    }\r\n};\r\n\r\nexport const getAllCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const customer = await CustomerModel.find();\r\n        res.status(201).send(customer)\r\n    } catch (error) {\r\n        res.status(500).send(error)\r\n    }\r\n}\r\n\r\n\r\nexport const deleteCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n\r\n        // Check if the customer exists\r\n        const customer = await CustomerModel.findById(id);\r\n        if (!customer) {\r\n           res.status(404).json({ success: false, message: 'Customer not found' });\r\n           return \r\n        }\r\n\r\n        // Delete the customer\r\n        await CustomerModel.findByIdAndDelete(id);\r\n\r\n        res.status(200).json({ success: true, message: 'Customer deleted successfully' });\r\n    } catch (error) {\r\n        console.error('Error deleting customer:', error);\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n    }\r\n};\r\n\r\n\r\nexport const getSingleCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const customer = await CustomerModel.findById(id);\r\n       \r\n        res.status(200).json({ success: true, data: customer });\r\n\r\n\r\n        \r\n    } catch (error) {\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { name, email, phone, address } = req.body;\r\n\r\n        console.log(req.body);\r\n\r\n        // Check if customer exists\r\n        const existingCustomer = await CustomerModel.findById(id);\r\n        if (!existingCustomer) {\r\n            res.status(404).json({ message: \"Customer not found.\" });\r\n            return;\r\n        }\r\n\r\n        // Update customer details\r\n        existingCustomer.name = name || existingCustomer.name;\r\n        existingCustomer.email = email || existingCustomer.email;\r\n        existingCustomer.phone = phone || existingCustomer.phone;\r\n        existingCustomer.address = address || existingCustomer.address;\r\n\r\n        await existingCustomer.save();\r\n\r\n        res.status(200).json({\r\n            message: \"Customer updated successfully\",\r\n            customer: {\r\n                id: existingCustomer._id,\r\n                name: existingCustomer.name,\r\n                email: existingCustomer.email,\r\n                phone: existingCustomer.phone,\r\n                address: existingCustomer.address,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error updating customer:\", error);\r\n        res.status(500).json({ message: \"Internal Server Error\", error });\r\n    }\r\n};","import express,{Router} from \"express\"\r\nimport { createService, deleteService, getAllService, updateService } from \"../controller/service.controller\";\r\n\r\n\r\nconst serviceRouter: Router = express.Router();\r\n\r\n\r\n\r\nserviceRouter.route(\"/service\").post(createService).get(getAllService)\r\nserviceRouter.route(\"/service/:id\").put(updateService).delete(deleteService)\r\n\r\n\r\nexport default serviceRouter","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\n\r\n\r\nconst ServiceSchema = new mongoose.Schema(\r\n    {\r\n        serviceName : {\r\n            type: String,\r\n            required:true\r\n        }\r\n    },\r\n    {\r\n        timestamps: true\r\n    }\r\n)\r\n\r\nconst ServiceModel = mongoose.model(\"Service\",ServiceSchema)\r\nexport default ServiceModel","import { Request, Response } from \"express\";\r\nimport ServiceModel from \"../models/service.model\";\r\n\r\nexport const createService = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { serviceName } = req.body;\r\n\r\n        const service = new ServiceModel({ serviceName })\r\n\r\n        await service.save();\r\n        res.status(200).json({ message: true, serviceName })\r\n\r\n    } catch (error) {\r\n        res.status(200).json({ message: false, error })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateService = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { serviceName } = req.body;\r\n\r\n        // Find service by ID and update it\r\n        const updatedService = await ServiceModel.findByIdAndUpdate(\r\n            id, \r\n            { serviceName }, \r\n            { new: true, runValidators: true }\r\n        );\r\n\r\n        if (!updatedService) {\r\n            res.status(404).json({ message: false, error: \"Service not found\" });\r\n            return;\r\n        }\r\n\r\n        res.status(200).json({ message: true, service: updatedService });\r\n    } catch (error) {\r\n        res.status(500).json({ message: false, error: error });\r\n    }\r\n};\r\n\r\n\r\nexport const getAllService = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n            const service = await ServiceModel.find();\r\n            res.status(200).json({ message: true, service })\r\n\r\n    } catch (error) {\r\n        res.status(200).json({ message: true, error })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const deleteService = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n\r\n        const service = await ServiceModel.findById(id);\r\n\r\n        if (!service) {\r\n            res.status(404).json({ message: false, error: \"Service not found\" });\r\n            return;\r\n        }\r\n\r\n        await service.deleteOne();\r\n        res.status(200).json({ message: true, id });\r\n    } catch (error) {\r\n        res.status(500).json({ message: false, error: error });\r\n    }\r\n};","import app from \"./app\";\r\nimport figlet from \"figlet\";\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.listen(PORT, async () => {\r\n  await figlet(\"fyp project\", function (err, data) {\r\n    if (err) {\r\n      console.log(\"Something went wrong...\");\r\n      console.dir(err);\r\n      return;\r\n    }\r\n    console.log(data);\r\n  });\r\n  console.log(`🚀 Server running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,kBAAiC;AACjC,kBAAiB;AACjB,IAAAC,iBAAmB;;;ACFnB,qBAAgC;;;ACAhC,oBAAmB;AACnB,kBAAiB;AAGjB,IAAM,UAAU,cAAAC,QAAO,YAAY;AAAA,EACjC,aAAa,CAAC,KAAK,MAAM,OAAO;AAC9B,OAAG,MAAM,UAAU;AAAA,EACrB;AAAA,EACA,UAAU,CAAC,KAAK,MAAM,OAAO;AAC3B,UAAM,eAAe,KAAK,IAAI,IAAI,MAAM,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AACtE,OAAG,MAAM,KAAK,YAAY,MAAM,eAAe,YAAAC,QAAK,QAAQ,KAAK,YAAY,CAAC;AAAA,EAChF;AACF,CAAC;AAGD,IAAM,aAAa,CAAC,KAAsB,MAA2B,OAAkC;AACrG,MAAI,KAAK,SAAS,WAAW,QAAQ,GAAG;AACtC,OAAG,MAAM,IAAI;AAAA,EACf,OAAO;AACL,OAAG,IAAI,MAAM,8BAA8B,CAAC;AAAA,EAC9C;AACF;AAGA,IAAM,aAAS,cAAAD,SAAO,EAAE,SAAS,WAAW,CAAC;AAE7C,IAAO,iBAAQ;;;AC1Bf,sBAAqB;AAGrB,IAAM,aAAa,IAAI,gBAAAE,QAAS;AAAA,EAC5B;AAAA,IACI,MAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAS;AAAA,IACb;AAAA,IACA,OAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAS;AAAA,MACT,QAAO;AAAA,IACX;AAAA,IACA,UAAW;AAAA,MACP,MAAM;AAAA,MACN,UAAS;AAAA,IACb;AAAA,IACA,OAAO;AAAA,MACH,MAAK;AAAA,MACL,UAAS;AAAA,IACb;AAAA,EAEJ;AAAA,EACA;AAAA,IACI,YAAW;AAAA,EACf;AACJ;AAEA,IAAM,YAAY,gBAAAA,QAAS,MAAM,QAAO,UAAU;AAClD,IAAO,qBAAQ;;;AC5Bf,0BAAgB;AAChB,sBAAmB;AACnB,oBAAmB;AAGnB,cAAAC,QAAO,OAAO;AAOP,IAAM,WAAW,OAAO,KAAoB,QAAiC;AAClF,MAAI;AACF,UAAM,EAAE,MAAM,OAAO,SAAS,IAAI,IAAI;AACtC,YAAQ,IAAI,IAAI,IAAI;AACpB,UAAM,QAAQ,IAAI,OAAO,IAAI,KAAK,OAAO;AAGzC,UAAM,OAAO,MAAM,gBAAAC,QAAO,QAAQ,EAAE;AACpC,UAAM,iBAAiB,MAAM,gBAAAA,QAAO,KAAK,UAAU,IAAI;AAGvD,UAAM,eAAe,MAAM,mBAAU,QAAQ,EAAE,MAAM,CAAC;AACtD,QAAI,cAAc;AAChB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,sBAAsB,CAAC;AACvD;AAAA,IACF;AAEA,UAAM,UAAU,IAAI,mBAAU,EAAE,MAAM,OAAO,UAAS,gBAAgB,MAAM,CAAC;AAC7E,UAAM,QAAQ,KAAK;AAEnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,MAAM,QAAQ,CAAC;AAAA,EAC9E,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,uBAAuB,MAAM,CAAC;AAAA,EAChE;AACF;AAGO,IAAM,QAAQ,OAAO,KAAc,QAAiC;AACzE,MAAI;AACF,UAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAEhC,YAAQ,IAAI,IAAI,IAAI;AAGpB,UAAM,OAAO,MAAM,mBAAU,QAAQ,EAAE,MAAM,CAAC;AAC9C,QAAI,CAAC,MAAM;AACT,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAC7D;AAAA,IACF;AAGA,UAAM,UAAU,MAAM,gBAAAA,QAAO,QAAQ,UAAU,KAAK,QAAQ;AAC5D,QAAI,CAAC,SAAS;AACZ,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAC7D;AAAA,IACF;AAGA,UAAM,QAAQ,oBAAAC,QAAI,KAAK,EAAE,IAAI,KAAK,IAAI,GAAG,QAAQ,IAAI,YAAsB;AAAA,MACzE,WAAW;AAAA,IACb,CAAC;AAGC,UAAM,aAAa,KAAK,SAAS;AACjC,WAAO,WAAW;AAGpB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,oBAAoB,OAAO,MAAM,WAAW,CAAC;AAAA,EAC/E,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,oBAAoB,MAAM,CAAC;AAAA,EAC7D;AACF;;;AHxEA,IAAM,aAAsB,eAAAC,QAAQ,OAAO;AAK3C,WAAW,KAAK,aAAY,eAAO,OAAO,OAAO,GAAE,QAAQ;AAC3D,WAAW,KAAK,UAAS,KAAK;AAI9B,IAAO,qBAAQ;;;AIbf,IAAAC,mBAAqB;AACrB,IAAAC,iBAAmB;AAEnB,eAAAC,QAAO,OAAO;AAEd,IAAM,YAAY,YAAY;AAC5B,MAAI;AACF,QAAI,CAAC,QAAQ,IAAI,cAAc;AAC7B,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,UAAM,iBAAAC,QAAS,QAAQ,QAAQ,IAAI,YAAY;AAE/C,YAAQ,IAAI,iCAAiC;AAAA,EAC/C,SAAS,OAAO;AACd,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAEA,IAAO,qBAAQ;;;ALdf,IAAAC,eAAiB;;;AMLjB,IAAAC,kBAAgC;;;ACAhC,IAAAC,mBAAkD;AAalD,IAAM,iBAAoC,IAAI,iBAAAC,QAAS;AAAA,EACnD;AAAA,IACI,MAAM;AAAA,MACF,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IAEd;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;AAGA,IAAM,gBAAkC,iBAAAA,QAAS,MAAiB,YAAY,cAAc;AAE5F,IAAO,yBAAQ;;;ACrCR,IAAM,iBAAiB,OAAO,KAAc,QAAiC;AAEhF,MAAI;AACA,UAAM,EAAE,MAAM,OAAO,OAAO,QAAQ,IAAI,IAAI;AAE5C,YAAQ,IAAI,IAAI,IAAI;AAGpB,UAAM,mBAAmB,MAAM,uBAAc,QAAQ,EAAE,MAAM,CAAC;AAC9D,QAAI,kBAAkB;AAClB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,2CAA2C,CAAC;AAC5E;AAAA,IACJ;AAKA,UAAM,cAAc,IAAI,uBAAc;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAEJ,CAAC;AAGD,UAAM,YAAY,KAAK;AAEvB,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACjB,SAAS;AAAA,MACT,UAAU;AAAA,QACN,IAAI,YAAY;AAAA,QAChB,MAAM,YAAY;AAAA,QAClB,OAAO,YAAY;AAAA,QACnB,OAAO,YAAY;AAAA,QACnB,SAAS,YAAY;AAAA,MACzB;AAAA,IACJ,CAAC;AAAA,EACL,SAAS,OAAO;AACZ,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,yBAAyB,MAAM,CAAC;AAAA,EACpE;AACJ;AAEO,IAAM,iBAAiB,OAAO,KAAc,QAAiC;AAChF,MAAI;AACA,UAAM,WAAW,MAAM,uBAAc,KAAK;AAC1C,QAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,EACjC,SAAS,OAAO;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,KAAK;AAAA,EAC9B;AACJ;AAGO,IAAM,iBAAiB,OAAO,KAAc,QAAiC;AAChF,MAAI;AACA,UAAM,EAAE,GAAG,IAAI,IAAI;AAGnB,UAAM,WAAW,MAAM,uBAAc,SAAS,EAAE;AAChD,QAAI,CAAC,UAAU;AACZ,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,SAAS,qBAAqB,CAAC;AACtE;AAAA,IACH;AAGA,UAAM,uBAAc,kBAAkB,EAAE;AAExC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,SAAS,gCAAgC,CAAC;AAAA,EACpF,SAAS,OAAO;AACZ,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,SAAS,wBAAwB,CAAC;AAAA,EAC7E;AACJ;AAGO,IAAM,oBAAoB,OAAO,KAAc,QAAiC;AACnF,MAAI;AACA,UAAM,EAAE,GAAG,IAAI,IAAI;AACnB,UAAM,WAAW,MAAM,uBAAc,SAAS,EAAE;AAEhD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,MAAM,SAAS,CAAC;AAAA,EAI1D,SAAS,OAAO;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,SAAS,wBAAwB,CAAC;AAAA,EAE7E;AACJ;AAGO,IAAM,iBAAiB,OAAO,KAAc,QAAiC;AAChF,MAAI;AACA,UAAM,EAAE,GAAG,IAAI,IAAI;AACnB,UAAM,EAAE,MAAM,OAAO,OAAO,QAAQ,IAAI,IAAI;AAE5C,YAAQ,IAAI,IAAI,IAAI;AAGpB,UAAM,mBAAmB,MAAM,uBAAc,SAAS,EAAE;AACxD,QAAI,CAAC,kBAAkB;AACnB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,sBAAsB,CAAC;AACvD;AAAA,IACJ;AAGA,qBAAiB,OAAO,QAAQ,iBAAiB;AACjD,qBAAiB,QAAQ,SAAS,iBAAiB;AACnD,qBAAiB,QAAQ,SAAS,iBAAiB;AACnD,qBAAiB,UAAU,WAAW,iBAAiB;AAEvD,UAAM,iBAAiB,KAAK;AAE5B,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACjB,SAAS;AAAA,MACT,UAAU;AAAA,QACN,IAAI,iBAAiB;AAAA,QACrB,MAAM,iBAAiB;AAAA,QACvB,OAAO,iBAAiB;AAAA,QACxB,OAAO,iBAAiB;AAAA,QACxB,SAAS,iBAAiB;AAAA,MAC9B;AAAA,IACJ,CAAC;AAAA,EACL,SAAS,OAAO;AACZ,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,yBAAyB,MAAM,CAAC;AAAA,EACpE;AACJ;;;AFnIA,IAAM,iBAA0B,gBAAAC,QAAQ,OAAO;AAK/C,eAAe,MAAM,WAAW,EAAE,KAAK,cAAc,EAAE,IAAI,cAAc;AACzE,eAAe,MAAM,eAAe,EAAE,OAAO,cAAc,EAAE,IAAI,iBAAiB,EAAE,IAAI,cAAc;AAGtG,IAAO,yBAAQ;;;AGXf,IAAAC,kBAA6B;;;ACA7B,IAAAC,mBAAkD;AAIlD,IAAM,gBAAgB,IAAI,iBAAAC,QAAS;AAAA,EAC/B;AAAA,IACI,aAAc;AAAA,MACV,MAAM;AAAA,MACN,UAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;AAEA,IAAM,eAAe,iBAAAA,QAAS,MAAM,WAAU,aAAa;AAC3D,IAAO,wBAAQ;;;ACdR,IAAM,gBAAgB,OAAO,KAAc,QAAiC;AAC/E,MAAI;AACA,UAAM,EAAE,YAAY,IAAI,IAAI;AAE5B,UAAM,UAAU,IAAI,sBAAa,EAAE,YAAY,CAAC;AAEhD,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,YAAY,CAAC;AAAA,EAEvD,SAAS,OAAO;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,MAAM,CAAC;AAAA,EAElD;AACJ;AAGO,IAAM,gBAAgB,OAAO,KAAc,QAAiC;AAC/E,MAAI;AACA,UAAM,EAAE,GAAG,IAAI,IAAI;AACnB,UAAM,EAAE,YAAY,IAAI,IAAI;AAG5B,UAAM,iBAAiB,MAAM,sBAAa;AAAA,MACtC;AAAA,MACA,EAAE,YAAY;AAAA,MACd,EAAE,KAAK,MAAM,eAAe,KAAK;AAAA,IACrC;AAEA,QAAI,CAAC,gBAAgB;AACjB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,OAAO,oBAAoB,CAAC;AACnE;AAAA,IACJ;AAEA,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,SAAS,eAAe,CAAC;AAAA,EACnE,SAAS,OAAO;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,MAAa,CAAC;AAAA,EACzD;AACJ;AAGO,IAAM,gBAAgB,OAAO,KAAc,QAAiC;AAC/E,MAAI;AACI,UAAM,UAAU,MAAM,sBAAa,KAAK;AACxC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,QAAQ,CAAC;AAAA,EAEvD,SAAS,OAAO;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,MAAM,CAAC;AAAA,EAEjD;AACJ;AAGO,IAAM,gBAAgB,OAAO,KAAc,QAAiC;AAC/E,MAAI;AACA,UAAM,EAAE,GAAG,IAAI,IAAI;AAEnB,UAAM,UAAU,MAAM,sBAAa,SAAS,EAAE;AAE9C,QAAI,CAAC,SAAS;AACV,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,OAAO,oBAAoB,CAAC;AACnE;AAAA,IACJ;AAEA,UAAM,QAAQ,UAAU;AACxB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,GAAG,CAAC;AAAA,EAC9C,SAAS,OAAO;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,MAAa,CAAC;AAAA,EACzD;AACJ;;;AFnEA,IAAM,gBAAwB,gBAAAC,QAAQ,OAAO;AAI7C,cAAc,MAAM,UAAU,EAAE,KAAK,aAAa,EAAE,IAAI,aAAa;AACrE,cAAc,MAAM,cAAc,EAAE,IAAI,aAAa,EAAE,OAAO,aAAa;AAG3E,IAAO,wBAAQ;;;ATDf,IAAM,UAAe,gBAAAC,SAAQ;AAE7B,eAAAC,QAAO,OAAO;AACd,mBAAU;AAGV,IAAI,IAAI,gBAAAD,QAAQ,KAAK,CAAC;AACtB,IAAI,QAAI,YAAAE,SAAK,CAAC;AAEd,IAAI,IAAI,gBAAAF,QAAQ,OAAO,UAAU,CAAC;AAGlC,IAAI,IAAI,kBAAkB,CAAC,KAAK,QAAQ;AACpC,QAAM,WAAW,IAAI,OAAO;AAC5B,QAAM,WAAW,aAAAG,QAAK,KAAK,WAAW,WAAW,QAAQ;AAEzD,MAAI,SAAS,UAAU,CAAC,QAAQ;AAC5B,QAAI,KAAK;AACL,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,iBAAiB,CAAC;AAAA,IACtD;AAAA,EACJ,CAAC;AACL,CAAC;AAMD,IAAI,IAAI,kBAAU;AAClB,IAAI,IAAI,sBAAc;AACtB,IAAI,IAAI,qBAAa;AAIrB,IAAO,cAAQ;;;AY3Cf,oBAAmB;AAEnB,IAAM,OAAO,QAAQ,IAAI,QAAQ;AAEjC,YAAI,OAAO,MAAM,YAAY;AAC3B,YAAM,cAAAC,SAAO,eAAe,SAAU,KAAK,MAAM;AAC/C,QAAI,KAAK;AACP,cAAQ,IAAI,yBAAyB;AACrC,cAAQ,IAAI,GAAG;AACf;AAAA,IACF;AACA,YAAQ,IAAI,IAAI;AAAA,EAClB,CAAC;AACD,UAAQ,IAAI,gDAAyC,IAAI,EAAE;AAC7D,CAAC;","names":["import_express","import_dotenv","multer","path","mongoose","dotenv","bcrypt","jwt","express","import_mongoose","import_dotenv","dotenv","mongoose","import_path","import_express","import_mongoose","mongoose","express","import_express","import_mongoose","mongoose","express","express","dotenv","cors","path","figlet"]}
{"version":3,"sources":["../../src/routes/customer.route.ts","../../src/models/customer.model.ts","../../src/controller/customer.controller.ts","../../src/middleware/protect-route.ts"],"sourcesContent":["import express, { Router } from \"express\"\r\nimport { createCustomer, deleteCustomer, getAllCustomer, getSingleCustomer, updateCustomer } from \"../controller/customer.controller\";\r\nimport { authMiddleware } from \"../middleware/auth-middleware\";\r\nimport { protectRoute } from \"../middleware/protect-route\";\r\nconst customerRouter: Router  = express.Router();\r\n\r\n\r\n\r\n\r\ncustomerRouter.route(\"/customer\").post(protectRoute,createCustomer).get(protectRoute,getAllCustomer)\r\ncustomerRouter.route(\"/customer/:id\").delete(deleteCustomer).get(getSingleCustomer).put(updateCustomer)\r\n\r\n\r\nexport default customerRouter","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\nexport interface ICustomer extends Document {\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  userId: mongoose.Types.ObjectId; \r\n  address?: string;\r\n  service: mongoose.Types.ObjectId; \r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// Define the Customer schema\r\nconst CustomerSchema: Schema<ICustomer> = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\", // Ensure this references the correct model name\r\n      required: true, // Assuming clientId should be required\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    phone: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    address: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n    service: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Service\", // Ensure this references the correct model name\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true, // Mongoose will automatically manage createdAt and updatedAt\r\n  },\r\n);\r\n\r\n// Create and export the Customer model\r\nconst CustomerModel: Model<ICustomer> = mongoose.model<ICustomer>(\r\n  \"Customer\", // Ensure the model name is capitalized\r\n  CustomerSchema,\r\n);\r\n\r\nexport default CustomerModel;\r\n","import { Request, Response } from \"express\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport CustomerModel from \"../models/customer.model\";\r\n\r\n\r\nexport const createCustomer = async (req: Request, res: Response): Promise<void> => {\r\n\r\n    try {\r\n        const { name, email, phone, address,service } = req.body;\r\n        const userId = req.user?.id;\r\n        console.log(req.body)\r\n\r\n        // Check if customer already exists\r\n        const existingCustomer = await CustomerModel.findOne({ email });\r\n        if (existingCustomer) {\r\n            res.status(400).json({ message: \"Customer with this email already exists.\" });\r\n            return;\r\n        }\r\n\r\n        // Hash the password\r\n\r\n        // Create new customer\r\n        const newCustomer = new CustomerModel({\r\n            name,\r\n            email,\r\n            phone,\r\n            address,\r\n            service,\r\n            userId\r\n        });\r\n\r\n        // Save customer to the database\r\n        await newCustomer.save();\r\n\r\n        res.status(201).json({\r\n            message: \"Customer created successfully\",\r\n            customer: {\r\n                id: newCustomer._id,\r\n                name: newCustomer.name,\r\n                email: newCustomer.email,\r\n                phone: newCustomer.phone,\r\n                address: newCustomer.address,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error creating customer:\", error);\r\n        res.status(500).json({ message: \"Internal Server Error\", error });\r\n    }\r\n};\r\n\r\nexport const getAllCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const userId = req.user?.id;\r\n\r\n        const customer = await CustomerModel.find({ userId: userId }).populate(\"service\");\r\n        console.log(customer)\r\n        res.status(201).send(customer)\r\n    } catch (error) {\r\n        res.status(500).send(error)\r\n    }\r\n}\r\n\r\n\r\nexport const deleteCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n\r\n        // Check if the customer exists\r\n        const customer = await CustomerModel.findById(id);\r\n        if (!customer) {\r\n           res.status(404).json({ success: false, message: 'Customer not found' });\r\n           return \r\n        }\r\n\r\n        // Delete the customer\r\n        await CustomerModel.findByIdAndDelete(id);\r\n\r\n        res.status(200).json({ success: true, message: 'Customer deleted successfully' });\r\n    } catch (error) {\r\n        console.error('Error deleting customer:', error);\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n    }\r\n};\r\n\r\n\r\nexport const getSingleCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const customer = await CustomerModel.findById(id);\r\n       \r\n        res.status(200).json({ success: true, data: customer });\r\n\r\n\r\n        \r\n    } catch (error) {\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { name, email, phone, address, service } = req.body;\r\n\r\n        console.log(req.body);\r\n\r\n    \r\n        const updatedCustomer = await CustomerModel.findByIdAndUpdate(\r\n            id,\r\n            { $set: { name, email, phone, address, service } },\r\n            { new: true, runValidators: true }\r\n        );\r\n\r\n        if (!updatedCustomer) {\r\n            res.status(404).json({ message: \"Customer not found.\" });\r\n            return;\r\n        }\r\n\r\n        res.status(200).json({\r\n            message: \"Customer updated successfully\",\r\n            customer: updatedCustomer,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error updating customer:\", error);\r\n        res.status(500).json({ message: \"Internal Server Error\", error });\r\n    }\r\n};","import { Request, Response, NextFunction } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n// Use the secret key from environment variable or fallback to a default value\r\nconst SECRET_KEY = process.env.JWT_SECRET || \"your-secret-key\"; \r\n\r\n// Middleware function to protect routes\r\nexport const protectRoute = (req: Request, res: Response, next: NextFunction): void => {\r\n  const authHeader = req.headers.authorization || req.cookies.token;\r\n\r\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n    res.status(401).json({ message: \"Unauthorized access. No token provided.\" });\r\n    return;\r\n  }\r\n\r\n  const token = authHeader.split(\" \")[1];\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, SECRET_KEY) as { id: string };\r\n\r\n    req.user = { id: decoded.id };\r\n\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ message: \"Invalid or expired token.\" });\r\n  }\r\n};\r\n"],"mappings":"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","names":["mongoose","jwt","express"]}
{"version":3,"sources":["../../src/routes/sales.route.ts","../../src/models/Invoice.model.ts","../../src/controller/sales.controller.js"],"sourcesContent":["import express from \"express\";\r\n// @ts-ignore\r\nimport { GenerateSales } from \"../controller/sales.controller.js\";\r\n\r\nconst SalesRouter = express.Router();\r\n\r\n\r\nSalesRouter.route(\"/sales\").get(GenerateSales)\r\n\r\n\r\n\r\nexport default SalesRouter;\r\n\r\n","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\nexport interface IInvoice extends Document {\r\n  clientId?: mongoose.Types.ObjectId;\r\n  userId?: mongoose.Types.ObjectId;\r\n  Service?: mongoose.Types.ObjectId;\r\n  invoiceNumber: string;\r\n  invoiceDate: Date;\r\n  invoiceAmount: number;\r\n  status: \"pending\" | \"paid\" | \"cancelled\";\r\n  items: {\r\n    description: string;\r\n    quantity: number;\r\n    price: number;\r\n  }[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst InvoiceSchema: Schema = new mongoose.Schema(\r\n  {\r\n    clientId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Customer\",\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"user\", \r\n      required: true,\r\n    },\r\n    Service: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Service\", \r\n      required: true,\r\n    },\r\n\r\n    invoiceNumber: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    invoiceDate: {\r\n      type: Date,\r\n      required: true,\r\n    },\r\n    invoiceAmount: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"pending\", \"paid\", \"cancelled\"],\r\n      default: \"pending\",\r\n    },\r\n    items: [\r\n      {\r\n        description: { type: String, required: true },\r\n        quantity: { type: Number, required: true },\r\n        price: { type: Number, required: true },\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    timestamps: true,\r\n  },\r\n);\r\n\r\nconst InvoiceModel: Model<IInvoice> = mongoose.model<IInvoice>(\r\n  \"Invoice\",\r\n  InvoiceSchema,\r\n);\r\n\r\nexport default InvoiceModel;\r\n","// @ts-nocheck\r\n\r\nimport InvoiceModel from \"../models/Invoice.model\"; // Use the .js file (not .ts)\r\nimport ARIMA from \"arima\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nexport const GenerateSales = async (req, res) => {\r\n  try {\r\n    // Fetch all invoices (adjust the query/fields as needed)\r\n    const invoices = await InvoiceModel.find(\r\n      {},\r\n      { _id: 0, invoiceDate: 1, invoiceAmount: 1 }\r\n    );\r\n\r\n    if (!invoices || invoices.length === 0) {\r\n      res.status(404).json({ success: false, message: \"No invoice data found\" });\r\n      return;\r\n    }\r\n\r\n    // Map invoices to sales data\r\n    const salesData = invoices.map((invoice) => ({\r\n      ds: invoice.invoiceDate,\r\n      y: invoice.invoiceAmount,\r\n    }));\r\n\r\n    // Sort sales data by date (ascending)\r\n    salesData.sort((a, b) => new Date(a.ds).getTime() - new Date(b.ds).getTime());\r\n\r\n    // Create a time series array for forecasting\r\n    const ts = salesData.map((data) => data.y);\r\n    if (ts.length < 3) {\r\n      res.status(400).json({ success: false, message: \"Not enough sales data for forecasting\" });\r\n      return;\r\n    }\r\n\r\n    // Train ARIMA model using (p=1, d=1, q=1) parameters\r\n    const arima = new ARIMA({ p: 1, d: 1, q: 1, verbose: false }).train(ts);\r\n    // Forecast the next 7 data points\r\n    const forecast = arima.forecast(7);\r\n\r\n    // Compute forecast dates starting from the day after the last invoice date\r\n    const lastDate = new Date(salesData[salesData.length - 1].ds);\r\n    const forecastData = [];\r\n    for (let i = 0; i < forecast.length; i++) {\r\n      const forecastDate = new Date(lastDate);\r\n      forecastDate.setDate(forecastDate.getDate() + i + 1);\r\n      forecastData.push({\r\n        ds: forecastDate.toISOString().split(\"T\")[0],\r\n        yhat: forecast[i],\r\n      });\r\n    }\r\n\r\n    // Prepare response payload\r\n    const responsePayload = {\r\n      success: true,\r\n      salesData,\r\n      forecastData,\r\n    };\r\n\r\n    // Check if an email parameter is provided in the query string\r\n    const email = req.query.email;\r\n    let email_status = null;\r\n    if (email) {\r\n      try {\r\n        const transporter = nodemailer.createTransport({\r\n          host: \"localhost\",\r\n          port: 1025,\r\n          secure: false,\r\n        });\r\n        const mailOptions = {\r\n          from: \"no-reply@example.com\",\r\n          to: email,\r\n          subject: \"Sales Forecast Report\",\r\n          text: JSON.stringify(responsePayload, null, 2),\r\n        };\r\n        await transporter.sendMail(mailOptions);\r\n        email_status = `Email sent successfully to ${email}`;\r\n      } catch (err) {\r\n        email_status = `Email sending failed: ${err.toString()}`;\r\n      }\r\n    }\r\n    responsePayload[\"email_status\"] = email_status;\r\n\r\n    res.status(200).json(responsePayload);\r\n  } catch (error) {\r\n    console.error(\"Error fetching sales data:\", error);\r\n    res.status(500).json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;;;ACApB,sBAAkD;AAmBlD,IAAM,gBAAwB,IAAI,gBAAAA,QAAS;AAAA,EACzC;AAAA,IACE,UAAU;AAAA,MACR,MAAM,gBAAAA,QAAS,OAAO,MAAM;AAAA,MAC5B,KAAK;AAAA,IACP;AAAA,IACA,QAAQ;AAAA,MACN,MAAM,gBAAAA,QAAS,OAAO,MAAM;AAAA,MAC5B,KAAK;AAAA,MACL,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM,gBAAAA,QAAS,OAAO,MAAM;AAAA,MAC5B,KAAK;AAAA,MACL,UAAU;AAAA,IACZ;AAAA,IAEA,eAAe;AAAA,MACb,MAAM;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,eAAe;AAAA,MACb,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,MAAM,CAAC,WAAW,QAAQ,WAAW;AAAA,MACrC,SAAS;AAAA,IACX;AAAA,IACA,OAAO;AAAA,MACL;AAAA,QACE,aAAa,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,QAC5C,UAAU,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,QACzC,OAAO,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,YAAY;AAAA,EACd;AACF;AAEA,IAAM,eAAgC,gBAAAA,QAAS;AAAA,EAC7C;AAAA,EACA;AACF;AAEA,IAAO,wBAAQ;;;ACrEf,mBAAkB;AAClB,wBAAuB;AAEhB,IAAM,gBAAgB,OAAO,KAAK,QAAQ;AAC/C,MAAI;AAEF,UAAM,WAAW,MAAM,sBAAa;AAAA,MAClC,CAAC;AAAA,MACD,EAAE,KAAK,GAAG,aAAa,GAAG,eAAe,EAAE;AAAA,IAC7C;AAEA,QAAI,CAAC,YAAY,SAAS,WAAW,GAAG;AACtC,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,SAAS,wBAAwB,CAAC;AACzE;AAAA,IACF;AAGA,UAAM,YAAY,SAAS,IAAI,CAAC,aAAa;AAAA,MAC3C,IAAI,QAAQ;AAAA,MACZ,GAAG,QAAQ;AAAA,IACb,EAAE;AAGF,cAAU,KAAK,CAAC,GAAG,MAAM,IAAI,KAAK,EAAE,EAAE,EAAE,QAAQ,IAAI,IAAI,KAAK,EAAE,EAAE,EAAE,QAAQ,CAAC;AAG5E,UAAM,KAAK,UAAU,IAAI,CAAC,SAAS,KAAK,CAAC;AACzC,QAAI,GAAG,SAAS,GAAG;AACjB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,SAAS,wCAAwC,CAAC;AACzF;AAAA,IACF;AAGA,UAAM,QAAQ,IAAI,aAAAC,QAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,SAAS,MAAM,CAAC,EAAE,MAAM,EAAE;AAEtE,UAAM,WAAW,MAAM,SAAS,CAAC;AAGjC,UAAM,WAAW,IAAI,KAAK,UAAU,UAAU,SAAS,CAAC,EAAE,EAAE;AAC5D,UAAM,eAAe,CAAC;AACtB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,YAAM,eAAe,IAAI,KAAK,QAAQ;AACtC,mBAAa,QAAQ,aAAa,QAAQ,IAAI,IAAI,CAAC;AACnD,mBAAa,KAAK;AAAA,QAChB,IAAI,aAAa,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,QAC3C,MAAM,SAAS,CAAC;AAAA,MAClB,CAAC;AAAA,IACH;AAGA,UAAM,kBAAkB;AAAA,MACtB,SAAS;AAAA,MACT;AAAA,MACA;AAAA,IACF;AAGA,UAAM,QAAQ,IAAI,MAAM;AACxB,QAAI,eAAe;AACnB,QAAI,OAAO;AACT,UAAI;AACF,cAAM,cAAc,kBAAAC,QAAW,gBAAgB;AAAA,UAC7C,MAAM;AAAA,UACN,MAAM;AAAA,UACN,QAAQ;AAAA,QACV,CAAC;AACD,cAAM,cAAc;AAAA,UAClB,MAAM;AAAA,UACN,IAAI;AAAA,UACJ,SAAS;AAAA,UACT,MAAM,KAAK,UAAU,iBAAiB,MAAM,CAAC;AAAA,QAC/C;AACA,cAAM,YAAY,SAAS,WAAW;AACtC,uBAAe,8BAA8B,KAAK;AAAA,MACpD,SAAS,KAAK;AACZ,uBAAe,yBAAyB,IAAI,SAAS,CAAC;AAAA,MACxD;AAAA,IACF;AACA,oBAAgB,cAAc,IAAI;AAElC,QAAI,OAAO,GAAG,EAAE,KAAK,eAAe;AAAA,EACtC,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,SAAS,yBAAyB,MAAM,CAAC;AAAA,EAClF;AACF;;;AFpFA,IAAM,cAAc,eAAAC,QAAQ,OAAO;AAGnC,YAAY,MAAM,QAAQ,EAAE,IAAI,aAAa;AAI7C,IAAO,sBAAQ;","names":["mongoose","ARIMA","nodemailer","express"]}
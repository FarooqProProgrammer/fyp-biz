{"version":3,"sources":["../../src/routes/auth.route.ts","../../src/lib/multer.ts","../../src/models/user.model.ts","../../src/controller/auth.controller.ts","../../src/models/otp.model.ts"],"sourcesContent":["import express, { Router } from \"express\"\r\nimport upload from \"../lib/multer\";\r\nimport { forgotPassword, login, logout, register, verifyOtp } from \"../controller/auth.controller\";\r\nconst authRouter: Router  = express.Router();\r\n\r\n\r\n\r\n\r\nauthRouter.post(\"/register\",upload.single(\"image\"),register)\r\nauthRouter.post(\"/login\",login)\r\nauthRouter.route('/logout').post(logout)\r\nauthRouter.route('/otp-verify').post(verifyOtp)\r\nauthRouter.route('/forgot-password').post(forgotPassword)\r\n\r\n\r\nexport default authRouter","import multer from \"multer\";\r\nimport path from \"path\";\r\n\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"uploads/\"); \r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n    cb(null, file.fieldname + \"-\" + uniqueSuffix + path.extname(file.originalname));\r\n  },\r\n});\r\n\r\n\r\nconst fileFilter = (req: Express.Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  if (file.mimetype.startsWith(\"image/\")) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(\"Only image files are allowed\"));\r\n  }\r\n};\r\n\r\n\r\nconst upload = multer({ storage, fileFilter });\r\n\r\nexport default upload;\r\n","import mongoose from \"mongoose\"\r\n\r\n\r\nconst UserSchema = new mongoose.Schema(\r\n    {\r\n        name : {\r\n            type: String,\r\n            required:true\r\n        },\r\n        email : {\r\n            type: String,\r\n            required:true,\r\n            unique:true\r\n        },\r\n        password : {\r\n            type: String,\r\n            required:true,\r\n        },\r\n        image: {\r\n            type:String,\r\n            required:true,\r\n        },\r\n\r\n    },\r\n    {\r\n        timestamps:true\r\n    }\r\n)\r\n\r\nconst UserModel = mongoose.model(\"user\",UserSchema)\r\nexport default UserModel","import { Request, Response } from \"express\";\r\nimport UserModel from \"../models/user.model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport dotenv from \"dotenv\";\r\nimport OtpModel from \"../models/otp.model\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\ndotenv.config();\r\n\r\ninterface MulterRequest extends Request {\r\n  file?: Express.Multer.File;\r\n}\r\n\r\nexport const register = async (\r\n  req: MulterRequest,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    console.log(req.body);\r\n    const image = req.file ? req.file.path : \"\";\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    const existingUser = await UserModel.findOne({ email });\r\n    if (existingUser) {\r\n      res.status(400).json({ message: \"User already exists\" });\r\n      return;\r\n    }\r\n\r\n    const newUser = new UserModel({\r\n      name,\r\n      email,\r\n      password: hashedPassword,\r\n      image,\r\n    });\r\n    await newUser.save();\r\n\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\r\n\r\n    await OtpModel.findByIdAndUpdate(\r\n      { email },\r\n      { otp: otpCode, expiresAt },\r\n      { upsert: true },\r\n    );\r\n\r\n    await sendOtpEmail(email, otpCode);\r\n\r\n    res.status(201).json({\r\n      message: \"User registered successfully. OTP sent to email.\",\r\n      user: newUser,\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error creating user\", error });\r\n  }\r\n};\r\n\r\nexport const login = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    console.log(req.body);\r\n\r\n    // Check if user exists\r\n    const user = await UserModel.findOne({ email });\r\n    if (!user) {\r\n      res.status(400).json({ message: \"Invalid email or password\" });\r\n      return;\r\n    }\r\n\r\n    // Validate password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      res.status(400).json({ message: \"Invalid email or password\" });\r\n      return;\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET as string, {\r\n      expiresIn: \"1d\",\r\n    });\r\n\r\n    res.cookie(\"token\", token, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      maxAge: 24 * 60 * 60 * 1000,\r\n    });\r\n\r\n    req.session.user = {\r\n      id: user._id,\r\n      name: user.name,\r\n      email: user.email,\r\n      image: user.image,\r\n      token: token,\r\n    };\r\n\r\n    // Convert Mongoose document to plain object\r\n    const userObject = user.toObject() as any;\r\n    delete userObject.password; // Remove password field\r\n\r\n    res.status(200).json({\r\n      message: \"Login successful\",\r\n      token,\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email,\r\n        image: user.image,\r\n        token: token,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error logging in\", error });\r\n  }\r\n};\r\n\r\nexport const forgotPassword = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    const user = await UserModel.findOne({ email });\r\n\r\n    // Generate OTP code\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n\r\n    // Set OTP expiration time (1 hour from now)\r\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\r\n\r\n    if (user) {\r\n      // If user exists, update OTP in OtpModel\r\n      await OtpModel.findOneAndUpdate(\r\n        { email },\r\n        { otp: otpCode, expiresAt },\r\n        { upsert: true },\r\n      );\r\n    } else {\r\n      // If no user exists, create a new OTP record\r\n      const otpRecord = new OtpModel({ email, otp: otpCode, expiresAt });\r\n      await otpRecord.save();\r\n    }\r\n\r\n    // Send OTP email\r\n    await sendOtpEmail(email, otpCode);\r\n\r\n    // Respond with a success message\r\n    res.status(200).json({\r\n      message: \"OTP sent to email for password reset.\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in forgotPassword:\", error);\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst sendOtpEmail = async (email: string, otpCode: string) => {\r\n  try {\r\n    const transporter = nodemailer.createTransport({\r\n      host: \"localhost\",\r\n      port: 1025,\r\n      secure: false,\r\n      auth: {\r\n        user: \"your-email@example.com\",\r\n        pass: \"your-email-password\",\r\n      },\r\n    });\r\n\r\n    const mailOptions = {\r\n      from: '\"Your Company\" <your-email@example.com>',\r\n      to: email,\r\n      subject: \"Your OTP Code\",\r\n      text: `Your OTP is: ${otpCode}. It expires in 60 minutes.`,\r\n    };\r\n\r\n    await transporter.sendMail(mailOptions);\r\n    console.log(`OTP sent to ${email}`);\r\n  } catch (error) {\r\n    console.error(\"Error sending OTP email:\", error);\r\n  }\r\n};\r\n\r\nexport const logout = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    res.clearCookie(\"token\", {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n    });\r\n\r\n    if (req.session) {\r\n      req.session.destroy((err) => {\r\n        if (err) {\r\n          res.status(500).json({ message: \"Error logging out\" });\r\n          return;\r\n        }\r\n        res.status(200).json({ message: \"Logout successful\" });\r\n      });\r\n    } else {\r\n      res.status(200).json({ message: \"Logout successful\" });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error logging out\", error });\r\n  }\r\n};\r\n\r\nexport const verifyOtp = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { emailInput, otp } = req.body;\r\n\r\n    console.log(req.body);\r\n\r\n    const otpRecord = await OtpModel.findOne({ email: emailInput, otp });\r\n\r\n    console.log(otpRecord);\r\n\r\n    if (!otpRecord) {\r\n      res.status(400).json({ message: \"Invalid OTP\" });\r\n      return;\r\n    }\r\n\r\n    if (new Date() > otpRecord.expiresAt) {\r\n      res.status(400).json({ message: \"OTP has expired\" });\r\n      return;\r\n    }\r\n\r\n    await UserModel.findOneAndUpdate(\r\n      { email: emailInput },\r\n      { isVerified: true },\r\n    );\r\n\r\n    await OtpModel.deleteOne({ email: emailInput });\r\n\r\n    res.status(200).json({ message: \"OTP verified successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error verifying OTP:\", error);\r\n    res.status(500).json({ message: \"Error verifying OTP\", error });\r\n  }\r\n};\r\n\r\nexport const ResendOtp = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    // Validate email format\r\n    if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: \"Invalid email format\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Check if user exists\r\n    const user = await UserModel.findOne({ email });\r\n\r\n    if (!user) {\r\n      res.status(404).json({\r\n        success: false,\r\n        message: \"User not found\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // OTP expiration time (1 hour)\r\n\r\n    // Update or create OTP record\r\n    if (user) {\r\n      // If user exists, update OTP in the OTP model\r\n      await OtpModel.findOneAndUpdate(\r\n        { email },\r\n        { otp: otpCode, expiresAt },\r\n        { upsert: true },\r\n      );\r\n    } else {\r\n      // If user doesn't exist in OTP model, create new OTP record\r\n      const otpRecord = new OtpModel({ email, otp: otpCode, expiresAt });\r\n      await otpRecord.save();\r\n    }\r\n\r\n    // Send OTP to the user's email\r\n    await sendOtpEmail(email, otpCode);\r\n\r\n    // Respond with success\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"OTP has been sent to your email.\",\r\n    });\r\n  } catch (error) {\r\n    // Catch and handle errors\r\n    console.error(error);\r\n\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"An error occurred while resending the OTP. Please try again.\",\r\n    });\r\n  }\r\n};\r\n","import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface IOtp extends Document {\r\n  email: string;\r\n  otp: string;\r\n  expiresAt: Date;\r\n}\r\n\r\nconst OtpSchema = new Schema<IOtp>({\r\n  email: { type: String, required: true },\r\n  otp: { type: String, required: true },\r\n  expiresAt: { type: Date, required: true, index: { expires: \"5m\" } }, // OTP expires in 5 minutes\r\n});\r\n\r\nconst OtpModel = mongoose.model<IOtp>(\"Otp\", OtpSchema);\r\nexport default OtpModel;\r\n"],"mappings":"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","names":["mongoose"]}
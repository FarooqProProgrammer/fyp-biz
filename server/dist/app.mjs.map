{"version":3,"sources":["../src/app.ts","../src/routes/auth.route.ts","../src/lib/multer.ts","../src/models/user.model.ts","../src/controller/auth.controller.ts","../src/models/otp.model.ts","../src/config/connection.ts","../src/routes/customer.route.ts","../src/models/customer.model.ts","../src/controller/customer.controller.ts","../src/middleware/protect-route.ts","../src/routes/service.route.ts","../src/models/service.model.ts","../src/controller/service.controller.ts","../src/routes/invoice.route.ts","../src/models/Invoice.model.ts","../src/validations/invoiceValidation.ts","../src/controller/invoice.controller.ts","../src/routes/sales.route.ts","../src/controller/sales.controller.js"],"sourcesContent":["import express, { Express } from \"express\";\r\nimport cors from \"cors\";\r\nimport dotenv from \"dotenv\";\r\nimport authRouter from \"./routes/auth.route\";\r\nimport connectDb from \"./config/connection\";\r\nimport path from \"path\";\r\nimport customerRouter from \"./routes/customer.route\";\r\nimport serviceRouter from \"./routes/service.route\";\r\nimport MongoStore from \"connect-mongo\";\r\nimport session from \"express-session\";\r\nimport invoiceRouter from \"./routes/invoice.route\";\r\nimport SalesRouter from \"./routes/sales.route\";\r\n\r\nconst app: Express = express();\r\n\r\ndotenv.config();\r\nconnectDb();\r\n\r\n// Middlewares\r\napp.use(express.json());\r\napp.use(cors());\r\napp.set(\"view engine\", \"ejs\");\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\n\r\napp.use(express.static(\"uploads/\"));\r\n\r\napp.use(\r\n  session({\r\n    secret: process.env.JWT_SECRET as string,\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    store: MongoStore.create({ mongoUrl: process.env.DATABASE_URI }),\r\n    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 }, // 1 day\r\n  }),\r\n);\r\n\r\n// Route to serve files from the uploads folder\r\napp.get(\"/uploads/:file\", (req, res) => {\r\n  const fileName = req.params.file;\r\n  const filePath = path.join(__dirname, \"uploads\", fileName);\r\n\r\n  res.sendFile(filePath, (err) => {\r\n    if (err) {\r\n      res.status(404).json({ message: \"File not found\" });\r\n    }\r\n  });\r\n});\r\n\r\n// All Routes\r\napp.use(authRouter);\r\napp.use(customerRouter);\r\napp.use(serviceRouter);\r\napp.use(invoiceRouter);\r\napp.use(SalesRouter);\r\n\r\nexport default app;\r\n","import express, { Router } from \"express\"\r\nimport upload from \"../lib/multer\";\r\nimport { forgotPassword, login, logout, register, verifyOtp } from \"../controller/auth.controller\";\r\nconst authRouter: Router  = express.Router();\r\n\r\n\r\n\r\n\r\nauthRouter.post(\"/register\",upload.single(\"image\"),register)\r\nauthRouter.post(\"/login\",login)\r\nauthRouter.route('/logout').post(logout)\r\nauthRouter.route('/otp-verify').post(verifyOtp)\r\nauthRouter.route('/forgot-password').post(forgotPassword)\r\n\r\n\r\nexport default authRouter","import multer from \"multer\";\r\nimport path from \"path\";\r\n\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, \"uploads/\"); \r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = Date.now() + \"-\" + Math.round(Math.random() * 1e9);\r\n    cb(null, file.fieldname + \"-\" + uniqueSuffix + path.extname(file.originalname));\r\n  },\r\n});\r\n\r\n\r\nconst fileFilter = (req: Express.Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  if (file.mimetype.startsWith(\"image/\")) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(\"Only image files are allowed\"));\r\n  }\r\n};\r\n\r\n\r\nconst upload = multer({ storage, fileFilter });\r\n\r\nexport default upload;\r\n","import mongoose from \"mongoose\"\r\n\r\n\r\nconst UserSchema = new mongoose.Schema(\r\n    {\r\n        name : {\r\n            type: String,\r\n            required:true\r\n        },\r\n        email : {\r\n            type: String,\r\n            required:true,\r\n            unique:true\r\n        },\r\n        password : {\r\n            type: String,\r\n            required:true,\r\n        },\r\n        image: {\r\n            type:String,\r\n            required:true,\r\n        },\r\n\r\n    },\r\n    {\r\n        timestamps:true\r\n    }\r\n)\r\n\r\nconst UserModel = mongoose.model(\"user\",UserSchema)\r\nexport default UserModel","import { Request, Response } from \"express\";\r\nimport UserModel from \"../models/user.model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport dotenv from \"dotenv\";\r\nimport OtpModel from \"../models/otp.model\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\ndotenv.config();\r\n\r\ninterface MulterRequest extends Request {\r\n  file?: Express.Multer.File;\r\n}\r\n\r\nexport const register = async (\r\n  req: MulterRequest,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    console.log(req.body);\r\n    const image = req.file ? req.file.path : \"\";\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    const existingUser = await UserModel.findOne({ email });\r\n    if (existingUser) {\r\n      res.status(400).json({ message: \"User already exists\" });\r\n      return;\r\n    }\r\n\r\n    const newUser = new UserModel({\r\n      name,\r\n      email,\r\n      password: hashedPassword,\r\n      image,\r\n    });\r\n    await newUser.save();\r\n\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\r\n\r\n    await OtpModel.findByIdAndUpdate(\r\n      { email },\r\n      { otp: otpCode, expiresAt },\r\n      { upsert: true },\r\n    );\r\n\r\n    await sendOtpEmail(email, otpCode);\r\n\r\n    res.status(201).json({\r\n      message: \"User registered successfully. OTP sent to email.\",\r\n      user: newUser,\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error creating user\", error });\r\n  }\r\n};\r\n\r\nexport const login = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    console.log(req.body);\r\n\r\n    // Check if user exists\r\n    const user = await UserModel.findOne({ email });\r\n    if (!user) {\r\n      res.status(400).json({ message: \"Invalid email or password\" });\r\n      return;\r\n    }\r\n\r\n    // Validate password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      res.status(400).json({ message: \"Invalid email or password\" });\r\n      return;\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET as string, {\r\n      expiresIn: \"1d\",\r\n    });\r\n\r\n    res.cookie(\"token\", token, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n      maxAge: 24 * 60 * 60 * 1000,\r\n    });\r\n\r\n    req.session.user = {\r\n      id: user._id,\r\n      name: user.name,\r\n      email: user.email,\r\n      image: user.image,\r\n      token: token,\r\n    };\r\n\r\n    // Convert Mongoose document to plain object\r\n    const userObject = user.toObject() as any;\r\n    delete userObject.password; // Remove password field\r\n\r\n    res.status(200).json({\r\n      message: \"Login successful\",\r\n      token,\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email,\r\n        image: user.image,\r\n        token: token,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error logging in\", error });\r\n  }\r\n};\r\n\r\nexport const forgotPassword = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    const user = await UserModel.findOne({ email });\r\n\r\n    // Generate OTP code\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n\r\n    // Set OTP expiration time (1 hour from now)\r\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000);\r\n\r\n    if (user) {\r\n      // If user exists, update OTP in OtpModel\r\n      await OtpModel.findOneAndUpdate(\r\n        { email },\r\n        { otp: otpCode, expiresAt },\r\n        { upsert: true },\r\n      );\r\n    } else {\r\n      // If no user exists, create a new OTP record\r\n      const otpRecord = new OtpModel({ email, otp: otpCode, expiresAt });\r\n      await otpRecord.save();\r\n    }\r\n\r\n    // Send OTP email\r\n    await sendOtpEmail(email, otpCode);\r\n\r\n    // Respond with a success message\r\n    res.status(200).json({\r\n      message: \"OTP sent to email for password reset.\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in forgotPassword:\", error);\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst sendOtpEmail = async (email: string, otpCode: string) => {\r\n  try {\r\n    const transporter = nodemailer.createTransport({\r\n      host: \"localhost\",\r\n      port: 1025,\r\n      secure: false,\r\n      auth: {\r\n        user: \"your-email@example.com\",\r\n        pass: \"your-email-password\",\r\n      },\r\n    });\r\n\r\n    const mailOptions = {\r\n      from: '\"Your Company\" <your-email@example.com>',\r\n      to: email,\r\n      subject: \"Your OTP Code\",\r\n      text: `Your OTP is: ${otpCode}. It expires in 60 minutes.`,\r\n    };\r\n\r\n    await transporter.sendMail(mailOptions);\r\n    console.log(`OTP sent to ${email}`);\r\n  } catch (error) {\r\n    console.error(\"Error sending OTP email:\", error);\r\n  }\r\n};\r\n\r\nexport const logout = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    res.clearCookie(\"token\", {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === \"production\",\r\n    });\r\n\r\n    if (req.session) {\r\n      req.session.destroy((err) => {\r\n        if (err) {\r\n          res.status(500).json({ message: \"Error logging out\" });\r\n          return;\r\n        }\r\n        res.status(200).json({ message: \"Logout successful\" });\r\n      });\r\n    } else {\r\n      res.status(200).json({ message: \"Logout successful\" });\r\n    }\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error logging out\", error });\r\n  }\r\n};\r\n\r\nexport const verifyOtp = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { emailInput, otp } = req.body;\r\n\r\n    console.log(req.body);\r\n\r\n    const otpRecord = await OtpModel.findOne({ email: emailInput, otp });\r\n\r\n    console.log(otpRecord);\r\n\r\n    if (!otpRecord) {\r\n      res.status(400).json({ message: \"Invalid OTP\" });\r\n      return;\r\n    }\r\n\r\n    if (new Date() > otpRecord.expiresAt) {\r\n      res.status(400).json({ message: \"OTP has expired\" });\r\n      return;\r\n    }\r\n\r\n    await UserModel.findOneAndUpdate(\r\n      { email: emailInput },\r\n      { isVerified: true },\r\n    );\r\n\r\n    await OtpModel.deleteOne({ email: emailInput });\r\n\r\n    res.status(200).json({ message: \"OTP verified successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error verifying OTP:\", error);\r\n    res.status(500).json({ message: \"Error verifying OTP\", error });\r\n  }\r\n};\r\n\r\nexport const ResendOtp = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { email } = req.body;\r\n\r\n    // Validate email format\r\n    if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: \"Invalid email format\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Check if user exists\r\n    const user = await UserModel.findOne({ email });\r\n\r\n    if (!user) {\r\n      res.status(404).json({\r\n        success: false,\r\n        message: \"User not found\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expiresAt = new Date(Date.now() + 60 * 60 * 1000); // OTP expiration time (1 hour)\r\n\r\n    // Update or create OTP record\r\n    if (user) {\r\n      // If user exists, update OTP in the OTP model\r\n      await OtpModel.findOneAndUpdate(\r\n        { email },\r\n        { otp: otpCode, expiresAt },\r\n        { upsert: true },\r\n      );\r\n    } else {\r\n      // If user doesn't exist in OTP model, create new OTP record\r\n      const otpRecord = new OtpModel({ email, otp: otpCode, expiresAt });\r\n      await otpRecord.save();\r\n    }\r\n\r\n    // Send OTP to the user's email\r\n    await sendOtpEmail(email, otpCode);\r\n\r\n    // Respond with success\r\n    res.status(200).json({\r\n      success: true,\r\n      message: \"OTP has been sent to your email.\",\r\n    });\r\n  } catch (error) {\r\n    // Catch and handle errors\r\n    console.error(error);\r\n\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"An error occurred while resending the OTP. Please try again.\",\r\n    });\r\n  }\r\n};\r\n","import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface IOtp extends Document {\r\n  email: string;\r\n  otp: string;\r\n  expiresAt: Date;\r\n}\r\n\r\nconst OtpSchema = new Schema<IOtp>({\r\n  email: { type: String, required: true },\r\n  otp: { type: String, required: true },\r\n  expiresAt: { type: Date, required: true, index: { expires: \"5m\" } }, // OTP expires in 5 minutes\r\n});\r\n\r\nconst OtpModel = mongoose.model<IOtp>(\"Otp\", OtpSchema);\r\nexport default OtpModel;\r\n","import mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nconst connectDb = async () => {\r\n  try {\r\n    if (!process.env.DATABASE_URI) {\r\n      throw new Error(\"DATABASE_URI is not defined in environment variables.\");\r\n    }\r\n\r\n    await mongoose.connect(process.env.DATABASE_URI);\r\n\r\n    console.log(\"MongoDB connected successfully!\");\r\n  } catch (error) {\r\n    process.exit(1); // Exit process with failure\r\n  }\r\n};\r\n\r\nexport default connectDb;\r\n","import express, { Router } from \"express\"\r\nimport { createCustomer, deleteCustomer, getAllCustomer, getSingleCustomer, updateCustomer } from \"../controller/customer.controller\";\r\nimport { authMiddleware } from \"../middleware/auth-middleware\";\r\nimport { protectRoute } from \"../middleware/protect-route\";\r\nconst customerRouter: Router  = express.Router();\r\n\r\n\r\n\r\n\r\ncustomerRouter.route(\"/customer\").post(protectRoute,createCustomer).get(protectRoute,getAllCustomer)\r\ncustomerRouter.route(\"/customer/:id\").delete(deleteCustomer).get(getSingleCustomer).put(updateCustomer)\r\n\r\n\r\nexport default customerRouter","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\nexport interface ICustomer extends Document {\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  userId: mongoose.Types.ObjectId; \r\n  address?: string;\r\n  service: mongoose.Types.ObjectId; \r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// Define the Customer schema\r\nconst CustomerSchema: Schema<ICustomer> = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\", // Ensure this references the correct model name\r\n      required: true, // Assuming clientId should be required\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    phone: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    address: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n    service: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Service\", // Ensure this references the correct model name\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true, // Mongoose will automatically manage createdAt and updatedAt\r\n  },\r\n);\r\n\r\n// Create and export the Customer model\r\nconst CustomerModel: Model<ICustomer> = mongoose.model<ICustomer>(\r\n  \"Customer\", // Ensure the model name is capitalized\r\n  CustomerSchema,\r\n);\r\n\r\nexport default CustomerModel;\r\n","import { Request, Response } from \"express\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport CustomerModel from \"../models/customer.model\";\r\n\r\n\r\nexport const createCustomer = async (req: Request, res: Response): Promise<void> => {\r\n\r\n    try {\r\n        const { name, email, phone, address,service } = req.body;\r\n        const userId = req.user?.id;\r\n        console.log(req.body)\r\n\r\n        // Check if customer already exists\r\n        const existingCustomer = await CustomerModel.findOne({ email });\r\n        if (existingCustomer) {\r\n            res.status(400).json({ message: \"Customer with this email already exists.\" });\r\n            return;\r\n        }\r\n\r\n        // Hash the password\r\n\r\n        // Create new customer\r\n        const newCustomer = new CustomerModel({\r\n            name,\r\n            email,\r\n            phone,\r\n            address,\r\n            service,\r\n            userId\r\n        });\r\n\r\n        // Save customer to the database\r\n        await newCustomer.save();\r\n\r\n        res.status(201).json({\r\n            message: \"Customer created successfully\",\r\n            customer: {\r\n                id: newCustomer._id,\r\n                name: newCustomer.name,\r\n                email: newCustomer.email,\r\n                phone: newCustomer.phone,\r\n                address: newCustomer.address,\r\n            },\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error creating customer:\", error);\r\n        res.status(500).json({ message: \"Internal Server Error\", error });\r\n    }\r\n};\r\n\r\nexport const getAllCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const userId = req.user?.id;\r\n\r\n        const customer = await CustomerModel.find({ userId: userId }).populate(\"service\");\r\n        console.log(customer)\r\n        res.status(201).send(customer)\r\n    } catch (error) {\r\n        res.status(500).send(error)\r\n    }\r\n}\r\n\r\n\r\nexport const deleteCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n\r\n        // Check if the customer exists\r\n        const customer = await CustomerModel.findById(id);\r\n        if (!customer) {\r\n           res.status(404).json({ success: false, message: 'Customer not found' });\r\n           return \r\n        }\r\n\r\n        // Delete the customer\r\n        await CustomerModel.findByIdAndDelete(id);\r\n\r\n        res.status(200).json({ success: true, message: 'Customer deleted successfully' });\r\n    } catch (error) {\r\n        console.error('Error deleting customer:', error);\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n    }\r\n};\r\n\r\n\r\nexport const getSingleCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const customer = await CustomerModel.findById(id);\r\n       \r\n        res.status(200).json({ success: true, data: customer });\r\n\r\n\r\n        \r\n    } catch (error) {\r\n        res.status(500).json({ success: false, message: 'Internal server error' });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateCustomer = async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { name, email, phone, address, service } = req.body;\r\n\r\n        console.log(req.body);\r\n\r\n    \r\n        const updatedCustomer = await CustomerModel.findByIdAndUpdate(\r\n            id,\r\n            { $set: { name, email, phone, address, service } },\r\n            { new: true, runValidators: true }\r\n        );\r\n\r\n        if (!updatedCustomer) {\r\n            res.status(404).json({ message: \"Customer not found.\" });\r\n            return;\r\n        }\r\n\r\n        res.status(200).json({\r\n            message: \"Customer updated successfully\",\r\n            customer: updatedCustomer,\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error updating customer:\", error);\r\n        res.status(500).json({ message: \"Internal Server Error\", error });\r\n    }\r\n};","import { Request, Response, NextFunction } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n// Use the secret key from environment variable or fallback to a default value\r\nconst SECRET_KEY = process.env.JWT_SECRET || \"your-secret-key\"; \r\n\r\n// Middleware function to protect routes\r\nexport const protectRoute = (req: Request, res: Response, next: NextFunction): void => {\r\n  const authHeader = req.headers.authorization || req.cookies.token;\r\n\r\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n    res.status(401).json({ message: \"Unauthorized access. No token provided.\" });\r\n    return;\r\n  }\r\n\r\n  const token = authHeader.split(\" \")[1];\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, SECRET_KEY) as { id: string };\r\n\r\n    req.user = { id: decoded.id };\r\n\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ message: \"Invalid or expired token.\" });\r\n  }\r\n};\r\n","import express,{Router} from \"express\"\r\nimport { createService, deleteService, getAllService, updateService } from \"../controller/service.controller\";\r\nimport { protectRoute } from \"../middleware/protect-route\";\r\n\r\n\r\nconst serviceRouter: Router = express.Router();\r\n\r\n\r\n\r\nserviceRouter.route(\"/service\").post(protectRoute, createService).get(protectRoute,getAllService)\r\nserviceRouter.route(\"/service/:id\").put(updateService).delete(deleteService)\r\n\r\n\r\nexport default serviceRouter","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\n\r\n\r\nconst ServiceSchema = new mongoose.Schema(\r\n    {\r\n        serviceName : {\r\n            type: String,\r\n            required:true\r\n        },\r\n        description:{\r\n            type: String,\r\n            required:true\r\n        },\r\n         userId: mongoose.Types.ObjectId\r\n    },\r\n    {\r\n        timestamps: true\r\n    }\r\n)\r\n\r\nconst ServiceModel = mongoose.model(\"Service\",ServiceSchema)\r\nexport default ServiceModel","import { Request, Response } from \"express\";\r\nimport ServiceModel from \"../models/service.model\";\r\n\r\nexport const createService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { serviceName, description } = req.body;\r\n    const userId = req.user?.id;\r\n\r\n    const service = new ServiceModel({ serviceName, description, userId });\r\n\r\n    await service.save();\r\n    res.status(200).json({ message: true, serviceName });\r\n  } catch (error) {\r\n    res.status(200).json({ message: false, error });\r\n  }\r\n};\r\n\r\nexport const updateService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { serviceName } = req.body;\r\n\r\n    // Find service by ID and update it\r\n    const updatedService = await ServiceModel.findByIdAndUpdate(\r\n      id,\r\n      { serviceName },\r\n      { new: true, runValidators: true },\r\n    );\r\n\r\n    if (!updatedService) {\r\n      res.status(404).json({ message: false, error: \"Service not found\" });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({ message: true, service: updatedService });\r\n  } catch (error) {\r\n    res.status(500).json({ message: false, error: error });\r\n  }\r\n};\r\n\r\nexport const getAllService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const userId = req.user?.id;\r\n    console.log(userId);\r\n\r\n    const service = await ServiceModel.find({ userId: userId });\r\n    res.status(200).json({ message: true, service });\r\n  } catch (error) {\r\n    res.status(200).json({ message: true, error });\r\n  }\r\n};\r\n\r\nexport const deleteService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const service = await ServiceModel.findById(id);\r\n\r\n    if (!service) {\r\n      res.status(404).json({ message: false, error: \"Service not found\" });\r\n      return;\r\n    }\r\n\r\n    await service.deleteOne();\r\n    res.status(200).json({ message: true, id });\r\n  } catch (error) {\r\n    res.status(500).json({ message: false, error: error });\r\n  }\r\n};\r\n","import express, { Router } from \"express\";\r\nimport { CreateInvoice, deletInvoice, getAllInvoice, getAllSingleQuery } from \"../controller/invoice.controller\";\r\nimport { protectRoute } from \"../middleware/protect-route\";\r\n\r\nconst invoiceRouter: Router = express.Router();\r\n\r\ninvoiceRouter.route(\"/invoice\").post(protectRoute, CreateInvoice).get(protectRoute,getAllInvoice);\r\ninvoiceRouter.route(\"/invoice/:id\").get(getAllSingleQuery).delete(protectRoute,deletInvoice)\r\n\r\nexport default invoiceRouter;\r\n","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\nexport interface IInvoice extends Document {\r\n  clientId?: mongoose.Types.ObjectId;\r\n  userId?: mongoose.Types.ObjectId;\r\n  Service?: mongoose.Types.ObjectId;\r\n  invoiceNumber: string;\r\n  invoiceDate: Date;\r\n  invoiceAmount: number;\r\n  status: \"pending\" | \"paid\" | \"cancelled\";\r\n  items: {\r\n    description: string;\r\n    quantity: number;\r\n    price: number;\r\n  }[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst InvoiceSchema: Schema = new mongoose.Schema(\r\n  {\r\n    clientId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Customer\",\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"user\", \r\n      required: true,\r\n    },\r\n    Service: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Service\", \r\n      required: true,\r\n    },\r\n\r\n    invoiceNumber: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    invoiceDate: {\r\n      type: Date,\r\n      required: true,\r\n    },\r\n    invoiceAmount: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"pending\", \"paid\", \"cancelled\"],\r\n      default: \"pending\",\r\n    },\r\n    items: [\r\n      {\r\n        description: { type: String, required: true },\r\n        quantity: { type: Number, required: true },\r\n        price: { type: Number, required: true },\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    timestamps: true,\r\n  },\r\n);\r\n\r\nconst InvoiceModel: Model<IInvoice> = mongoose.model<IInvoice>(\r\n  \"Invoice\",\r\n  InvoiceSchema,\r\n);\r\n\r\nexport default InvoiceModel;\r\n","import Joi from \"joi\";\r\n\r\nexport const invoiceSchema = Joi.object({\r\n  clientId: Joi.string().optional(), \r\n  invoiceNumber: Joi.string().required(),\r\n  invoiceDate: Joi.date().required(),\r\n  Service: Joi.string().required(),\r\n  invoiceAmount: Joi.number().required(),\r\n  status: Joi.string().valid(\"pending\", \"paid\", \"cancelled\").default(\"pending\"),\r\n  items: Joi.array()\r\n    .items(\r\n      Joi.object({\r\n        description: Joi.string().required(),\r\n        quantity: Joi.number().integer().min(1).required(),\r\n        price: Joi.number().positive().required(),\r\n      })\r\n    )\r\n    .min(1)\r\n    .required(),\r\n});\r\n","import { Request, Response } from \"express\";\r\nimport InvoiceModel from \"../models/Invoice.model\";\r\nimport { invoiceSchema } from \"../validations/invoiceValidation\";\r\nimport nodemailer from \"nodemailer\";\r\nimport CustomerModel from \"../models/customer.model\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport const CreateInvoice = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    console.log(req.body);\r\n    const userId = req.user?.id;\r\n\r\n    const { error, value } = invoiceSchema.validate(req.body, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (error) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: \"Validation Error\",\r\n        errors: error.details.map((err) => err.message),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      ...req.body,\r\n      userId,\r\n    };\r\n\r\n    const newInvoice = new InvoiceModel(payload);\r\n    console.log(newInvoice);\r\n    await newInvoice.save();\r\n\r\n    if (newInvoice?.clientId) {\r\n      await sendInvoiceEmail(newInvoice, newInvoice.clientId.toString());\r\n    } else {\r\n      console.error(\"Client ID is undefined.\");\r\n    }\r\n\r\n    res.status(201).json({ success: true, invoice: newInvoice });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n\r\nexport const getAllInvoice = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n  \r\n    if (!req.user || !req.user.id) {\r\n       res.status(401).json({ success: false, message: \"Unauthorized\" });\r\n       return\r\n    }\r\n\r\n    const userId = req.user.id;\r\n    console.log(\"Fetching invoices for user:\", userId);\r\n\r\n    const invoices = await InvoiceModel.find({ userId })\r\n      .populate(\"clientId\") \r\n      .populate(\"userId\");\r\n\r\n    console.log(\"Invoices fetched:\", invoices.length);\r\n    \r\n    res.status(200).json({ success: true, invoices });\r\n  } catch (error) {\r\n    console.error(\"Error fetching invoices:\", error);\r\n    res.status(500).json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n\r\n\r\nexport const getAllSingleQuery = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const invoices = await InvoiceModel.findById(id).populate(\"clientId\");\r\n\r\n    res.status(200).json({ success: true, invoices });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n\r\nexport const deletInvoice = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    // Check if the customer exists\r\n    const customer = await InvoiceModel.findById(id);\r\n    if (!customer) {\r\n      res.status(404).json({ success: false, message: \"Invoice not found\" });\r\n      return;\r\n    }\r\n\r\n    // Delete the customer\r\n    await InvoiceModel.findByIdAndDelete(id);\r\n\r\n    res\r\n      .status(200)\r\n      .json({ success: true, message: \"Invoice deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting customer:\", error);\r\n    res.status(500).json({ success: false, message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst sendInvoiceEmail = async (newInvoice: any, clientId: string) => {\r\n  try {\r\n    // Fetch client details using clientId, not invoiceId\r\n    const populatedInvoice = await CustomerModel.findById(clientId);\r\n\r\n    console.log(\"Populated Invoice:\", populatedInvoice);\r\n\r\n    if (!populatedInvoice) {\r\n      console.error(\"Client details not found for clientId:\", clientId);\r\n      return;\r\n    }\r\n\r\n    const clientEmail = populatedInvoice?.email;\r\n    if (!clientEmail) {\r\n      console.error(\"Client email not found.\");\r\n      return;\r\n    }\r\n\r\n    const templateData = {\r\n      ...newInvoice,\r\n      customer: populatedInvoice,\r\n    };\r\n\r\n    const templatePath = path.join(__dirname, \"../views\", \"email.html\");\r\n    let emailHtml = fs.readFileSync(templatePath, \"utf8\");\r\n    emailHtml = emailHtml.replace(\r\n      /{{customer_email}}/g,\r\n      populatedInvoice?.email,\r\n    );\r\n\r\n    const transporter = nodemailer.createTransport({\r\n      host: \"localhost\",\r\n      port: 1025,\r\n      secure: false,\r\n      auth: {\r\n        user: \"your-email@example.com\",\r\n        pass: \"your-email-password\",\r\n      },\r\n    });\r\n\r\n    const mailOptions = {\r\n      from: '\"Your Company\" <your-email@example.com>',\r\n      to: clientEmail,\r\n      subject: `Invoice #${newInvoice.invoiceNumber}`,\r\n      html: emailHtml,\r\n    };\r\n\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log(\"Invoice email sent:\", info.messageId);\r\n  } catch (error) {\r\n    console.error(\"Error sending invoice email:\", error);\r\n  }\r\n};\r\n","import express from \"express\";\r\n// @ts-ignore\r\nimport { GenerateSales } from \"../controller/sales.controller.js\";\r\n\r\nconst SalesRouter = express.Router();\r\n\r\n\r\nSalesRouter.route(\"/sales\").get(GenerateSales)\r\n\r\n\r\n\r\nexport default SalesRouter;\r\n\r\n","// @ts-nocheck\r\n\r\nimport InvoiceModel from \"../models/Invoice.model\"; // Use the .js file (not .ts)\r\nimport ARIMA from \"arima\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nexport const GenerateSales = async (req, res) => {\r\n  try {\r\n    // Fetch all invoices (adjust the query/fields as needed)\r\n    const invoices = await InvoiceModel.find(\r\n      {},\r\n      { _id: 0, invoiceDate: 1, invoiceAmount: 1 }\r\n    );\r\n\r\n    if (!invoices || invoices.length === 0) {\r\n      res.status(404).json({ success: false, message: \"No invoice data found\" });\r\n      return;\r\n    }\r\n\r\n    // Map invoices to sales data\r\n    const salesData = invoices.map((invoice) => ({\r\n      ds: invoice.invoiceDate,\r\n      y: invoice.invoiceAmount,\r\n    }));\r\n\r\n    // Sort sales data by date (ascending)\r\n    salesData.sort((a, b) => new Date(a.ds).getTime() - new Date(b.ds).getTime());\r\n\r\n    // Create a time series array for forecasting\r\n    const ts = salesData.map((data) => data.y);\r\n    if (ts.length < 3) {\r\n      res.status(400).json({ success: false, message: \"Not enough sales data for forecasting\" });\r\n      return;\r\n    }\r\n\r\n    // Train ARIMA model using (p=1, d=1, q=1) parameters\r\n    const arima = new ARIMA({ p: 1, d: 1, q: 1, verbose: false }).train(ts);\r\n    // Forecast the next 7 data points\r\n    const forecast = arima.forecast(7);\r\n\r\n    // Compute forecast dates starting from the day after the last invoice date\r\n    const lastDate = new Date(salesData[salesData.length - 1].ds);\r\n    const forecastData = [];\r\n    for (let i = 0; i < forecast.length; i++) {\r\n      const forecastDate = new Date(lastDate);\r\n      forecastDate.setDate(forecastDate.getDate() + i + 1);\r\n      forecastData.push({\r\n        ds: forecastDate.toISOString().split(\"T\")[0],\r\n        yhat: forecast[i],\r\n      });\r\n    }\r\n\r\n    // Prepare response payload\r\n    const responsePayload = {\r\n      success: true,\r\n      salesData,\r\n      forecastData,\r\n    };\r\n\r\n    // Check if an email parameter is provided in the query string\r\n    const email = req.query.email;\r\n    let email_status = null;\r\n    if (email) {\r\n      try {\r\n        const transporter = nodemailer.createTransport({\r\n          host: \"localhost\",\r\n          port: 1025,\r\n          secure: false,\r\n        });\r\n        const mailOptions = {\r\n          from: \"no-reply@example.com\",\r\n          to: email,\r\n          subject: \"Sales Forecast Report\",\r\n          text: JSON.stringify(responsePayload, null, 2),\r\n        };\r\n        await transporter.sendMail(mailOptions);\r\n        email_status = `Email sent successfully to ${email}`;\r\n      } catch (err) {\r\n        email_status = `Email sending failed: ${err.toString()}`;\r\n      }\r\n    }\r\n    responsePayload[\"email_status\"] = email_status;\r\n\r\n    res.status(200).json(responsePayload);\r\n  } catch (error) {\r\n    console.error(\"Error fetching sales data:\", error);\r\n    res.status(500).json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n"],"mappings":"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","names":["express","dotenv","mongoose","mongoose","dotenv","path","express","mongoose","jwt","express","express","mongoose","express","express","mongoose","nodemailer","path","nodemailer","express","express","nodemailer","express","express","dotenv","path"]}
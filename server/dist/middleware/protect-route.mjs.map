{"version":3,"sources":["../../src/middleware/protect-route.ts"],"sourcesContent":["import { Request, Response, NextFunction } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n// Use the secret key from environment variable or fallback to a default value\r\nconst SECRET_KEY = process.env.JWT_SECRET || \"your-secret-key\"; \r\n\r\n// Middleware function to protect routes\r\nexport const protectRoute = (req: Request, res: Response, next: NextFunction): void => {\r\n  const authHeader = req.headers.authorization || req.cookies.token;\r\n\r\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n    res.status(401).json({ message: \"Unauthorized access. No token provided.\" });\r\n    return;\r\n  }\r\n\r\n  const token = authHeader.split(\" \")[1];\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, SECRET_KEY) as { id: string };\r\n\r\n    req.user = { id: decoded.id };\r\n\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ message: \"Invalid or expired token.\" });\r\n  }\r\n};\r\n"],"mappings":";AACA,OAAO,SAAS;AAGhB,IAAM,aAAa,QAAQ,IAAI,cAAc;AAGtC,IAAM,eAAe,CAAC,KAAc,KAAe,SAA6B;AACrF,QAAM,aAAa,IAAI,QAAQ,iBAAiB,IAAI,QAAQ;AAE5D,MAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,0CAA0C,CAAC;AAC3E;AAAA,EACF;AAEA,QAAM,QAAQ,WAAW,MAAM,GAAG,EAAE,CAAC;AAErC,MAAI;AACF,UAAM,UAAU,IAAI,OAAO,OAAO,UAAU;AAE5C,QAAI,OAAO,EAAE,IAAI,QAAQ,GAAG;AAE5B,SAAK;AAAA,EACP,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,4BAA4B,CAAC;AAAA,EAC/D;AACF;","names":[]}
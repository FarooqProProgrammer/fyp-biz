{"version":3,"sources":["../../src/middleware/auth-middleware.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\"; \r\n\r\nexport const authMiddleware = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n        const token = req.cookies.token; \r\n\r\n        if (!token) {\r\n             res.status(401).json({ message: \"Unauthorized: No token provided\" });\r\n             return\r\n        }\r\n\r\n        // Verify token\r\n        const decoded = jwt.verify(token, JWT_SECRET) as { userId: string };\r\n\r\n        // Attach user ID to request object\r\n        (req as any).user = decoded.userId;\r\n\r\n        next(); // Proceed to the next middleware\r\n    } catch (error) {\r\n        console.error(\"Auth Middleware Error:\", error);\r\n      res.status(403).json({ message: \"Invalid or expired token\" });\r\n      return\r\n    }\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAgB;AAEhB,IAAM,aAAa,QAAQ,IAAI,cAAc;AAEtC,IAAM,iBAAiB,OAAO,KAAc,KAAe,SAAsC;AACpG,MAAI;AACA,UAAM,QAAQ,IAAI,QAAQ;AAE1B,QAAI,CAAC,OAAO;AACP,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,kCAAkC,CAAC;AACnE;AAAA,IACL;AAGA,UAAM,UAAU,oBAAAA,QAAI,OAAO,OAAO,UAAU;AAG5C,IAAC,IAAY,OAAO,QAAQ;AAE5B,SAAK;AAAA,EACT,SAAS,OAAO;AACZ,YAAQ,MAAM,0BAA0B,KAAK;AAC/C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,2BAA2B,CAAC;AAC5D;AAAA,EACF;AACJ;","names":["jwt"]}
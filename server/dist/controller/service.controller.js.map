{"version":3,"sources":["../../src/controller/service.controller.ts","../../src/models/service.model.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport ServiceModel from \"../models/service.model\";\r\n\r\nexport const createService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { serviceName, description } = req.body;\r\n    const userId = req.user?.id;\r\n\r\n    const service = new ServiceModel({ serviceName, description, userId });\r\n\r\n    await service.save();\r\n    res.status(200).json({ message: true, serviceName });\r\n  } catch (error) {\r\n    res.status(200).json({ message: false, error });\r\n  }\r\n};\r\n\r\nexport const updateService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { serviceName } = req.body;\r\n\r\n    // Find service by ID and update it\r\n    const updatedService = await ServiceModel.findByIdAndUpdate(\r\n      id,\r\n      { serviceName },\r\n      { new: true, runValidators: true },\r\n    );\r\n\r\n    if (!updatedService) {\r\n      res.status(404).json({ message: false, error: \"Service not found\" });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({ message: true, service: updatedService });\r\n  } catch (error) {\r\n    res.status(500).json({ message: false, error: error });\r\n  }\r\n};\r\n\r\nexport const getAllService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const userId = req.user?.id;\r\n    console.log(userId);\r\n\r\n    const service = await ServiceModel.find({ userId: userId });\r\n    res.status(200).json({ message: true, service });\r\n  } catch (error) {\r\n    res.status(200).json({ message: true, error });\r\n  }\r\n};\r\n\r\nexport const deleteService = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const service = await ServiceModel.findById(id);\r\n\r\n    if (!service) {\r\n      res.status(404).json({ message: false, error: \"Service not found\" });\r\n      return;\r\n    }\r\n\r\n    await service.deleteOne();\r\n    res.status(200).json({ message: true, id });\r\n  } catch (error) {\r\n    res.status(500).json({ message: false, error: error });\r\n  }\r\n};\r\n","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\n\r\n\r\nconst ServiceSchema = new mongoose.Schema(\r\n    {\r\n        serviceName : {\r\n            type: String,\r\n            required:true\r\n        },\r\n        description:{\r\n            type: String,\r\n            required:true\r\n        },\r\n         userId: mongoose.Types.ObjectId\r\n    },\r\n    {\r\n        timestamps: true\r\n    }\r\n)\r\n\r\nconst ServiceModel = mongoose.model(\"Service\",ServiceSchema)\r\nexport default ServiceModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,sBAAkD;AAIlD,IAAM,gBAAgB,IAAI,gBAAAA,QAAS;AAAA,EAC/B;AAAA,IACI,aAAc;AAAA,MACV,MAAM;AAAA,MACN,UAAS;AAAA,IACb;AAAA,IACA,aAAY;AAAA,MACR,MAAM;AAAA,MACN,UAAS;AAAA,IACb;AAAA,IACC,QAAQ,gBAAAA,QAAS,MAAM;AAAA,EAC5B;AAAA,EACA;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;AAEA,IAAM,eAAe,gBAAAA,QAAS,MAAM,WAAU,aAAa;AAC3D,IAAO,wBAAQ;;;ADnBR,IAAM,gBAAgB,OAC3B,KACA,QACkB;AAClB,MAAI;AACF,UAAM,EAAE,aAAa,YAAY,IAAI,IAAI;AACzC,UAAM,SAAS,IAAI,MAAM;AAEzB,UAAM,UAAU,IAAI,sBAAa,EAAE,aAAa,aAAa,OAAO,CAAC;AAErE,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,YAAY,CAAC;AAAA,EACrD,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,MAAM,CAAC;AAAA,EAChD;AACF;AAEO,IAAM,gBAAgB,OAC3B,KACA,QACkB;AAClB,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,IAAI;AACnB,UAAM,EAAE,YAAY,IAAI,IAAI;AAG5B,UAAM,iBAAiB,MAAM,sBAAa;AAAA,MACxC;AAAA,MACA,EAAE,YAAY;AAAA,MACd,EAAE,KAAK,MAAM,eAAe,KAAK;AAAA,IACnC;AAEA,QAAI,CAAC,gBAAgB;AACnB,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,OAAO,oBAAoB,CAAC;AACnE;AAAA,IACF;AAEA,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,SAAS,eAAe,CAAC;AAAA,EACjE,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,MAAa,CAAC;AAAA,EACvD;AACF;AAEO,IAAM,gBAAgB,OAC3B,KACA,QACkB;AAClB,MAAI;AACF,UAAM,SAAS,IAAI,MAAM;AACzB,YAAQ,IAAI,MAAM;AAElB,UAAM,UAAU,MAAM,sBAAa,KAAK,EAAE,OAAe,CAAC;AAC1D,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,QAAQ,CAAC;AAAA,EACjD,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,MAAM,CAAC;AAAA,EAC/C;AACF;AAEO,IAAM,gBAAgB,OAC3B,KACA,QACkB;AAClB,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,IAAI;AAEnB,UAAM,UAAU,MAAM,sBAAa,SAAS,EAAE;AAE9C,QAAI,CAAC,SAAS;AACZ,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,OAAO,oBAAoB,CAAC;AACnE;AAAA,IACF;AAEA,UAAM,QAAQ,UAAU;AACxB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,MAAM,GAAG,CAAC;AAAA,EAC5C,SAAS,OAAO;AACd,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,OAAO,MAAa,CAAC;AAAA,EACvD;AACF;","names":["mongoose"]}
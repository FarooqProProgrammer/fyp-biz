{"version":3,"sources":["../../src/controller/invoice.controller.ts","../../src/models/Invoice.model.ts","../../src/validations/invoiceValidation.ts","../../src/models/customer.model.ts"],"sourcesContent":["import { Request, Response } from \"express\";\r\nimport InvoiceModel from \"../models/Invoice.model\";\r\nimport { invoiceSchema } from \"../validations/invoiceValidation\";\r\nimport nodemailer from \"nodemailer\";\r\nimport CustomerModel from \"../models/customer.model\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport const CreateInvoice = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    console.log(req.body);\r\n    const userId = req.user?.id;\r\n\r\n    const { error, value } = invoiceSchema.validate(req.body, {\r\n      abortEarly: false,\r\n    });\r\n\r\n    if (error) {\r\n      res.status(400).json({\r\n        success: false,\r\n        message: \"Validation Error\",\r\n        errors: error.details.map((err) => err.message),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      ...req.body,\r\n      userId,\r\n    };\r\n\r\n    const newInvoice = new InvoiceModel(payload);\r\n    console.log(newInvoice);\r\n    await newInvoice.save();\r\n\r\n    if (newInvoice?.clientId) {\r\n      await sendInvoiceEmail(newInvoice, newInvoice.clientId.toString());\r\n    } else {\r\n      console.error(\"Client ID is undefined.\");\r\n    }\r\n\r\n    res.status(201).json({ success: true, invoice: newInvoice });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n\r\nexport const getAllInvoice = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n  \r\n    if (!req.user || !req.user.id) {\r\n       res.status(401).json({ success: false, message: \"Unauthorized\" });\r\n       return\r\n    }\r\n\r\n    const userId = req.user.id;\r\n    console.log(\"Fetching invoices for user:\", userId);\r\n\r\n    const invoices = await InvoiceModel.find({ userId })\r\n      .populate(\"clientId\") \r\n      .populate(\"userId\");\r\n\r\n    console.log(\"Invoices fetched:\", invoices.length);\r\n    \r\n    res.status(200).json({ success: true, invoices });\r\n  } catch (error) {\r\n    console.error(\"Error fetching invoices:\", error);\r\n    res.status(500).json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n\r\n\r\nexport const getAllSingleQuery = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    const invoices = await InvoiceModel.findById(id).populate(\"clientId\");\r\n\r\n    res.status(200).json({ success: true, invoices });\r\n  } catch (error) {\r\n    res\r\n      .status(500)\r\n      .json({ success: false, message: \"Internal Server Error\", error });\r\n  }\r\n};\r\n\r\nexport const deletInvoice = async (\r\n  req: Request,\r\n  res: Response,\r\n): Promise<void> => {\r\n  try {\r\n    const { id } = req.params;\r\n\r\n    // Check if the customer exists\r\n    const customer = await InvoiceModel.findById(id);\r\n    if (!customer) {\r\n      res.status(404).json({ success: false, message: \"Invoice not found\" });\r\n      return;\r\n    }\r\n\r\n    // Delete the customer\r\n    await InvoiceModel.findByIdAndDelete(id);\r\n\r\n    res\r\n      .status(200)\r\n      .json({ success: true, message: \"Invoice deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting customer:\", error);\r\n    res.status(500).json({ success: false, message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst sendInvoiceEmail = async (newInvoice: any, clientId: string) => {\r\n  try {\r\n    // Fetch client details using clientId, not invoiceId\r\n    const populatedInvoice = await CustomerModel.findById(clientId);\r\n\r\n    console.log(\"Populated Invoice:\", populatedInvoice);\r\n\r\n    if (!populatedInvoice) {\r\n      console.error(\"Client details not found for clientId:\", clientId);\r\n      return;\r\n    }\r\n\r\n    const clientEmail = populatedInvoice?.email;\r\n    if (!clientEmail) {\r\n      console.error(\"Client email not found.\");\r\n      return;\r\n    }\r\n\r\n    const templateData = {\r\n      ...newInvoice,\r\n      customer: populatedInvoice,\r\n    };\r\n\r\n    const templatePath = path.join(__dirname, \"../views\", \"email.html\");\r\n    let emailHtml = fs.readFileSync(templatePath, \"utf8\");\r\n    emailHtml = emailHtml.replace(\r\n      /{{customer_email}}/g,\r\n      populatedInvoice?.email,\r\n    );\r\n\r\n    const transporter = nodemailer.createTransport({\r\n      host: \"localhost\",\r\n      port: 1025,\r\n      secure: false,\r\n      auth: {\r\n        user: \"your-email@example.com\",\r\n        pass: \"your-email-password\",\r\n      },\r\n    });\r\n\r\n    const mailOptions = {\r\n      from: '\"Your Company\" <your-email@example.com>',\r\n      to: clientEmail,\r\n      subject: `Invoice #${newInvoice.invoiceNumber}`,\r\n      html: emailHtml,\r\n    };\r\n\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log(\"Invoice email sent:\", info.messageId);\r\n  } catch (error) {\r\n    console.error(\"Error sending invoice email:\", error);\r\n  }\r\n};\r\n","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\nexport interface IInvoice extends Document {\r\n  clientId?: mongoose.Types.ObjectId;\r\n  userId?: mongoose.Types.ObjectId;\r\n  Service?: mongoose.Types.ObjectId;\r\n  invoiceNumber: string;\r\n  invoiceDate: Date;\r\n  invoiceAmount: number;\r\n  status: \"pending\" | \"paid\" | \"cancelled\";\r\n  items: {\r\n    description: string;\r\n    quantity: number;\r\n    price: number;\r\n  }[];\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst InvoiceSchema: Schema = new mongoose.Schema(\r\n  {\r\n    clientId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Customer\",\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"user\", \r\n      required: true,\r\n    },\r\n    Service: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Service\", \r\n      required: true,\r\n    },\r\n\r\n    invoiceNumber: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    invoiceDate: {\r\n      type: Date,\r\n      required: true,\r\n    },\r\n    invoiceAmount: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    status: {\r\n      type: String,\r\n      enum: [\"pending\", \"paid\", \"cancelled\"],\r\n      default: \"pending\",\r\n    },\r\n    items: [\r\n      {\r\n        description: { type: String, required: true },\r\n        quantity: { type: Number, required: true },\r\n        price: { type: Number, required: true },\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    timestamps: true,\r\n  },\r\n);\r\n\r\nconst InvoiceModel: Model<IInvoice> = mongoose.model<IInvoice>(\r\n  \"Invoice\",\r\n  InvoiceSchema,\r\n);\r\n\r\nexport default InvoiceModel;\r\n","import Joi from \"joi\";\r\n\r\nexport const invoiceSchema = Joi.object({\r\n  clientId: Joi.string().optional(), \r\n  invoiceNumber: Joi.string().required(),\r\n  invoiceDate: Joi.date().required(),\r\n  Service: Joi.string().required(),\r\n  invoiceAmount: Joi.number().required(),\r\n  status: Joi.string().valid(\"pending\", \"paid\", \"cancelled\").default(\"pending\"),\r\n  items: Joi.array()\r\n    .items(\r\n      Joi.object({\r\n        description: Joi.string().required(),\r\n        quantity: Joi.number().integer().min(1).required(),\r\n        price: Joi.number().positive().required(),\r\n      })\r\n    )\r\n    .min(1)\r\n    .required(),\r\n});\r\n","import mongoose, { Document, Schema, Model } from \"mongoose\";\r\n\r\nexport interface ICustomer extends Document {\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  userId: mongoose.Types.ObjectId; \r\n  address?: string;\r\n  service: mongoose.Types.ObjectId; \r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// Define the Customer schema\r\nconst CustomerSchema: Schema<ICustomer> = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    userId: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"User\", // Ensure this references the correct model name\r\n      required: true, // Assuming clientId should be required\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    phone: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    address: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n    service: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Service\", // Ensure this references the correct model name\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true, // Mongoose will automatically manage createdAt and updatedAt\r\n  },\r\n);\r\n\r\n// Create and export the Customer model\r\nconst CustomerModel: Model<ICustomer> = mongoose.model<ICustomer>(\r\n  \"Customer\", // Ensure the model name is capitalized\r\n  CustomerSchema,\r\n);\r\n\r\nexport default CustomerModel;\r\n"],"mappings":"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","names":["mongoose","Joi","import_mongoose","mongoose","path","fs","nodemailer"]}